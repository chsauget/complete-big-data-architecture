{
	"name": "Sentiment Analysis",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"08fc4230-4f44-41fa-89f8-76088b3c6778": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.91,
													"neutral": 0.05,
													"negative": 0.04
												},
												"text": "<p>There is a pretty good diagram in the <a href=\"http://java.sun.com/javaee/javaserverfaces/download.html\" rel=\"noreferrer\">JSF specification</a> that shows the request lifecycle - essential for understanding this stuff.</p>\n\n<p>The steps are:</p>\n\n<ul>\n<li><strong>Restore View</strong>.",
												"offset": 0,
												"length": 289
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "The UIComponent tree is rebuilt.</li>\n<li><strong>Apply Request Values</strong>.",
												"offset": 290,
												"length": 80
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "Editable components should implement EditableValueHolder.",
												"offset": 371,
												"length": 57
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "This phase walks the component tree and calls the <em>processDecodes</em> methods.",
												"offset": 429,
												"length": 82
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.45,
													"negative": 0.54
												},
												"text": "If the component isn't something complex like a UIData, it won't do much except call its own <em>decode</em> method.",
												"offset": 512,
												"length": 116
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.54,
													"negative": 0.44
												},
												"text": "The <em>decode</em> method doesn't do much except find its renderer and invokes its <em>decode</em> method, passing itself as an argument.",
												"offset": 629,
												"length": 138
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.26,
													"neutral": 0.62,
													"negative": 0.12
												},
												"text": "It is the renderer's job to get any submitted value and set it via <em>setSubmittedValue</em>.</li>\n<li><strong>Process Validations</strong>.",
												"offset": 768,
												"length": 141
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.96,
													"negative": 0.01
												},
												"text": "This phase calls <em>processValidators</em> which will call <em>validate</em>.",
												"offset": 910,
												"length": 78
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.05,
													"neutral": 0.92,
													"negative": 0.03
												},
												"text": "The <em>validate</em> method takes the submitted value, converts it with any converters, validates it with any validators and (assuming the data passes those tests) calls <em>setValue</em>.",
												"offset": 989,
												"length": 189
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.34,
													"neutral": 0.63,
													"negative": 0.03
												},
												"text": "This will store the value as a local variable.",
												"offset": 1179,
												"length": 46
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.03,
													"negative": 0.97
												},
												"text": "While this local variable is not null, it will be returned and not the value from the value binding for any calls to <em>getValue</em>.</li>\n<li><strong>Update Model Values</strong>.",
												"offset": 1226,
												"length": 182
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.96,
													"negative": 0.01
												},
												"text": "This phase calls <em>processUpdates</em>.",
												"offset": 1409,
												"length": 41
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "In an input component, this will call <em>updateModel</em> which will get the <em>ValueExpression</em> and invoke it to set the value on the model.</li>\n<li><strong>Invoke Application</strong>.",
												"offset": 1451,
												"length": 193
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Button event listeners and so on will be invoked here (as will navigation if memory serves).</li>\n<li><strong>Render Response</strong>.",
												"offset": 1645,
												"length": 135
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0,
													"negative": 0.96
												},
												"text": "The tree is rendered via the renderers and the state saved.</li>\n<li>If any of these phases fail (e.g.",
												"offset": 1781,
												"length": 102
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "a value is invalid), the lifecycle skips to Render Response.</li>\n<li>Various events can be fired after most of these phases, invoking listeners as appropriate (like value change listeners after Process Validations).</li>\n</ul>\n\n<p>This is a somewhat simplified version of events.",
												"offset": 1884,
												"length": 280
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Refer to the specification for more details.</p>\n\n<p>I would question why you are writing your own UIComponent.",
												"offset": 2165,
												"length": 111
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.88,
													"neutral": 0.04,
													"negative": 0.08
												},
												"text": "This is a non-trivial task and a deep understanding of the JSF architecture is required to get it right.",
												"offset": 2277,
												"length": 104
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.98,
													"neutral": 0.01,
													"negative": 0.01
												},
												"text": "If you need a custom control, it is better to create a concrete control that extends an exisiting UIComponent (like HtmlInputText does) with an equivalent renderer.</p>\n\n<p>If contamination isn't an issue, there is an open-source JSF implementation in the form of Apache MyFaces.</p>",
												"offset": 2382,
												"length": 283
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34454",
										"Body": "<p>There is a pretty good diagram in the <a href=\"http://java.sun.com/javaee/javaserverfaces/download.html\" rel=\"noreferrer\">JSF specification</a> that shows the request lifecycle - essential for understanding this stuff.</p>\n\n<p>The steps are:</p>\n\n<ul>\n<li><strong>Restore View</strong>. The UIComponent tree is rebuilt.</li>\n<li><strong>Apply Request Values</strong>. Editable components should implement EditableValueHolder. This phase walks the component tree and calls the <em>processDecodes</em> methods. If the component isn't something complex like a UIData, it won't do much except call its own <em>decode</em> method. The <em>decode</em> method doesn't do much except find its renderer and invokes its <em>decode</em> method, passing itself as an argument. It is the renderer's job to get any submitted value and set it via <em>setSubmittedValue</em>.</li>\n<li><strong>Process Validations</strong>. This phase calls <em>processValidators</em> which will call <em>validate</em>. The <em>validate</em> method takes the submitted value, converts it with any converters, validates it with any validators and (assuming the data passes those tests) calls <em>setValue</em>. This will store the value as a local variable. While this local variable is not null, it will be returned and not the value from the value binding for any calls to <em>getValue</em>.</li>\n<li><strong>Update Model Values</strong>. This phase calls <em>processUpdates</em>. In an input component, this will call <em>updateModel</em> which will get the <em>ValueExpression</em> and invoke it to set the value on the model.</li>\n<li><strong>Invoke Application</strong>. Button event listeners and so on will be invoked here (as will navigation if memory serves).</li>\n<li><strong>Render Response</strong>. The tree is rendered via the renderers and the state saved.</li>\n<li>If any of these phases fail (e.g. a value is invalid), the lifecycle skips to Render Response.</li>\n<li>Various events can be fired after most of these phases, invoking listeners as appropriate (like value change listeners after Process Validations).</li>\n</ul>\n\n<p>This is a somewhat simplified version of events. Refer to the specification for more details.</p>\n\n<p>I would question why you are writing your own UIComponent. This is a non-trivial task and a deep understanding of the JSF architecture is required to get it right. If you need a custom control, it is better to create a concrete control that extends an exisiting UIComponent (like HtmlInputText does) with an equivalent renderer.</p>\n\n<p>If contamination isn't an issue, there is an open-source JSF implementation in the form of Apache MyFaces.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>Despite primarily being a windows user, I am a huge fan of rsync.",
												"offset": 0,
												"length": 68
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.61,
													"neutral": 0.18,
													"negative": 0.21
												},
												"text": "Now, I don't want to argue the virtues of rsync vs any other tool...this is not my point.</p>\n\n<p>The only way I've ever found of running rsync on windows is via a version that is built to run on top of Cygwin, and as Cygwin has issues with Unicode, so does rsync.</p>\n\n<p>Is anyone familiar enough with the workings of rsync to say if there are any real technical programming hurdles to porting rsync to a native Win32 binary?",
												"offset": 70,
												"length": 427
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.18,
													"negative": 0.78
												},
												"text": "</p>\n\n<p>Or is it maybe that there has just never been enough interest from windows users to care to port it over?</p>\n\n<p>Partly I ask because I'm am considering trying to take on the task of starting a port, but I want to make sure there's not something I'm missing in terms of why it may not be possible.</p>",
												"offset": 499,
												"length": 311
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34463",
										"Body": "<p>Despite primarily being a windows user, I am a huge fan of rsync.  Now, I don't want to argue the virtues of rsync vs any other tool...this is not my point.</p>\n\n<p>The only way I've ever found of running rsync on windows is via a version that is built to run on top of Cygwin, and as Cygwin has issues with Unicode, so does rsync.</p>\n\n<p>Is anyone familiar enough with the workings of rsync to say if there are any real technical programming hurdles to porting rsync to a native Win32 binary?  </p>\n\n<p>Or is it maybe that there has just never been enough interest from windows users to care to port it over?</p>\n\n<p>Partly I ask because I'm am considering trying to take on the task of starting a port, but I want to make sure there's not something I'm missing in terms of why it may not be possible.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>There is a way to do it thru web services, but I have done more with implementing custom event handlers.",
												"offset": 0,
												"length": 107
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.05,
													"neutral": 0.94,
													"negative": 0.01
												},
												"text": "Here is a bit of code that will do what you want.",
												"offset": 109,
												"length": 49
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Keep in mind, you can only execute this from the server, so you may want to wrap this up in a web service to allow access from your embedded devices.",
												"offset": 160,
												"length": 149
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "Also, you will need to reference the Microsoft.SharePoint.dll in this code.</p>\n\n<pre><code>using (SPSite site = new SPSite(\"http://yoursitename/subsite\"))\n{\n    using (SPWeb web = site.OpenWeb())\n    {\n        SPListItemCollection list = web.Lists[\"MyDocumentLibrary\"].GetItems(new SPQuery());\n        foreach(SPListItem itm in list) {\n            Stream inStream = itm.File.OpenBinaryStream();\n            XmlTextReader reader = new XmlTextReader(inStream);\n            XmlDocument xd = new XmlDocument();\n            xd.Load(reader);\n            //from here you can read whatever XML node that contains your version info\n            reader.Close();\n            inStream.Close();\n        }\n    }\n}\n</code></pre>\n\n<p>The using() statements are to ensure that you do not create a memory leak, as the SPSite and SPWeb are unmanaged objects.</p>\n\n<p>Edit: If the version number has been promoted to a library field, you can access it by the following within the for loop above:</p>\n\n<pre><code>itm[\"FieldName\"]\n</code></pre>",
												"offset": 311,
												"length": 1022
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34465",
										"Body": "<p>There is a way to do it thru web services, but I have done more with implementing custom event handlers.  Here is a bit of code that will do what you want.  Keep in mind, you can only execute this from the server, so you may want to wrap this up in a web service to allow access from your embedded devices.  Also, you will need to reference the Microsoft.SharePoint.dll in this code.</p>\n\n<pre><code>using (SPSite site = new SPSite(\"http://yoursitename/subsite\"))\n{\n    using (SPWeb web = site.OpenWeb())\n    {\n        SPListItemCollection list = web.Lists[\"MyDocumentLibrary\"].GetItems(new SPQuery());\n        foreach(SPListItem itm in list) {\n            Stream inStream = itm.File.OpenBinaryStream();\n            XmlTextReader reader = new XmlTextReader(inStream);\n            XmlDocument xd = new XmlDocument();\n            xd.Load(reader);\n            //from here you can read whatever XML node that contains your version info\n            reader.Close();\n            inStream.Close();\n        }\n    }\n}\n</code></pre>\n\n<p>The using() statements are to ensure that you do not create a memory leak, as the SPSite and SPWeb are unmanaged objects.</p>\n\n<p>Edit: If the version number has been promoted to a library field, you can access it by the following within the for loop above:</p>\n\n<pre><code>itm[\"FieldName\"]\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.97,
													"negative": 0.01
												},
												"text": "<p>You don't have to have the tester's edition; the Developer Edition works, <em>as long as you can code and run those tests locally.</em></p>\n\n<p>I believe with the standard MSDN license, if you have Developer Edition, you can run a single build server with a copy of it.",
												"offset": 0,
												"length": 272
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.58,
													"negative": 0.41
												},
												"text": "There might be some extra limitations, such as who can run builds on the server; you should review your license agreement to see if there are any issues.</p>",
												"offset": 274,
												"length": 157
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34466",
										"Body": "<p>You don't have to have the tester's edition; the Developer Edition works, <em>as long as you can code and run those tests locally.</em></p>\n\n<p>I believe with the standard MSDN license, if you have Developer Edition, you can run a single build server with a copy of it.  There might be some extra limitations, such as who can run builds on the server; you should review your license agreement to see if there are any issues.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>You can use the built in <code>dir()</code> function to get a list of all the attributes a module has.",
												"offset": 0,
												"length": 105
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.94,
													"negative": 0.03
												},
												"text": "Try this at the command line to see how it works.</p>\n\n<pre><code>&gt;&gt;&gt; import moduleName\n&gt;&gt;&gt; dir(moduleName)\n</code></pre>\n\n<p>Also, you can use the <code>hasattr(module_name, \"attr_name\")</code> function to find out if a module has a specific attribute.</p>\n\n<p>See the <a href=\"http://www.ibm.com/developerworks/library/l-pyint.html\" rel=\"noreferrer\">Guide to Python introspection</a> for more information.</p>",
												"offset": 107,
												"length": 429
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34467",
										"Body": "<p>You can use the built in <code>dir()</code> function to get a list of all the attributes a module has.  Try this at the command line to see how it works.</p>\n\n<pre><code>&gt;&gt;&gt; import moduleName\n&gt;&gt;&gt; dir(moduleName)\n</code></pre>\n\n<p>Also, you can use the <code>hasattr(module_name, \"attr_name\")</code> function to find out if a module has a specific attribute.</p>\n\n<p>See the <a href=\"http://www.ibm.com/developerworks/library/l-pyint.html\" rel=\"noreferrer\">Guide to Python introspection</a> for more information.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.94,
													"negative": 0.06
												},
												"text": "<p>To check if it has a particular method:</p>\n\n<pre><code>hasattr(object,\"method\")\n</code></pre>",
												"offset": 0,
												"length": 97
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34472",
										"Body": "<p>To check if it has a particular method:</p>\n\n<pre><code>hasattr(object,\"method\")\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.96,
													"negative": 0.03
												},
												"text": "<p>I prefer PHPUnit now, but when I started out I used SimpleTest as I didn't always have access to the command line.",
												"offset": 0,
												"length": 117
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.95,
													"neutral": 0,
													"negative": 0.05
												},
												"text": "SimpleTest is nice, but the only thing it really has over PHPUnit, in my opinion, is the web runner.</p>\n\n<p>The reasons I like PHPUnit are that it integrates with other PHP developer tools such as <a href=\"http://phing.info\" rel=\"noreferrer\" title=\"Phing\">phing</a> (as does SimpleTest), <a href=\"http://www.phpundercontrol.org/about.html\" rel=\"noreferrer\" title=\"phpUnderControl\">phpUnderControl</a>, and <a href=\"http://code.google.com/p/xinc/\" rel=\"noreferrer\" title=\"Xinc\">Xinc</a>.",
												"offset": 119,
												"length": 487
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.81,
													"neutral": 0.08,
													"negative": 0.11
												},
												"text": "As of version 3.0 it <a href=\"http://www.phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects\" rel=\"noreferrer\" title=\"PHPUnit Mock Objects\">has mocking</a> support, is being actively developed, and the documentation is excellent.</p>\n\n<p>Really the only way to answer this question for yourself is to try both out for a time, and see which fits your style better.</p>\n\n<p>EDIT: Phing now integrates with SimpleTest as well.</p>",
												"offset": 608,
												"length": 448
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34474",
										"Body": "<p>I prefer PHPUnit now, but when I started out I used SimpleTest as I didn't always have access to the command line.  SimpleTest is nice, but the only thing it really has over PHPUnit, in my opinion, is the web runner.</p>\n\n<p>The reasons I like PHPUnit are that it integrates with other PHP developer tools such as <a href=\"http://phing.info\" rel=\"noreferrer\" title=\"Phing\">phing</a> (as does SimpleTest), <a href=\"http://www.phpundercontrol.org/about.html\" rel=\"noreferrer\" title=\"phpUnderControl\">phpUnderControl</a>, and <a href=\"http://code.google.com/p/xinc/\" rel=\"noreferrer\" title=\"Xinc\">Xinc</a>.  As of version 3.0 it <a href=\"http://www.phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects\" rel=\"noreferrer\" title=\"PHPUnit Mock Objects\">has mocking</a> support, is being actively developed, and the documentation is excellent.</p>\n\n<p>Really the only way to answer this question for yourself is to try both out for a time, and see which fits your style better.</p>\n\n<p>EDIT: Phing now integrates with SimpleTest as well.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.08,
													"neutral": 0.9,
													"negative": 0.02
												},
												"text": "<p>I have to do some JavaScript in the future, so it is time to update my toolbox.",
												"offset": 0,
												"length": 82
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.94,
													"negative": 0.04
												},
												"text": "Right now I use Firefox with some addons:</p>\n\n<ul>\n<li>JavaScript Shell from <a href=\"https://www.squarefree.com/bookmarklets/webdevel.html\" rel=\"nofollow noreferrer\">https://www.squarefree.com/bookmarklets/webdevel.html</a></li>\n<li>Firefox Dom Inspector</li>\n<li>Firebug</li>\n<li>Greasemonkey</li>\n<li>Stylish</li>\n</ul>\n\n<p>I plan to use <a href=\"http://www.hacksrus.com/~ginda/venkman/\" rel=\"nofollow noreferrer\">Venkman Javascript debugger</a>  as well as <a href=\"https://github.com/pivotal/jsunit\" rel=\"nofollow noreferrer\">jsunit</a> and <a href=\"http://jslint.com/\" rel=\"nofollow noreferrer\">js-lint</a>.</p>\n\n<p>For programming I'm stick with vim.</p>\n\n<p>So what other tools do you use when developing JavaScript?</p>",
												"offset": 83,
												"length": 729
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34476",
										"Body": "<p>I have to do some JavaScript in the future, so it is time to update my toolbox. Right now I use Firefox with some addons:</p>\n\n<ul>\n<li>JavaScript Shell from <a href=\"https://www.squarefree.com/bookmarklets/webdevel.html\" rel=\"nofollow noreferrer\">https://www.squarefree.com/bookmarklets/webdevel.html</a></li>\n<li>Firefox Dom Inspector</li>\n<li>Firebug</li>\n<li>Greasemonkey</li>\n<li>Stylish</li>\n</ul>\n\n<p>I plan to use <a href=\"http://www.hacksrus.com/~ginda/venkman/\" rel=\"nofollow noreferrer\">Venkman Javascript debugger</a>  as well as <a href=\"https://github.com/pivotal/jsunit\" rel=\"nofollow noreferrer\">jsunit</a> and <a href=\"http://jslint.com/\" rel=\"nofollow noreferrer\">js-lint</a>.</p>\n\n<p>For programming I'm stick with vim.</p>\n\n<p>So what other tools do you use when developing JavaScript?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.56,
													"negative": 0.43
												},
												"text": "<p>Your issue with mixing data may be how Sql 2005 sorts text data.",
												"offset": 0,
												"length": 67
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.4,
													"neutral": 0.24,
													"negative": 0.36
												},
												"text": "It's not a 'natural' sort.</p>\n\n<p>If you have a varchar field and you do:</p>\n\n<pre><code>where value &gt; '20.5'\n</code></pre>\n\n<p>Values like \"5\" will be in your result (as in a character based sort \"5\" comes after \"20.5\")</p>\n\n<p>You're going to be better off with separate columns for storage.</p>\n\n<p>Use Coalesce to merge them into one column if you need them merged in your results:</p>\n\n<pre><code>select [ID], [Name], Coalesce( [value_str], [value_num] )\nfrom [tablename]\n</code></pre>",
												"offset": 68,
												"length": 495
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34480",
										"Body": "<p>Your issue with mixing data may be how Sql 2005 sorts text data. It's not a 'natural' sort.</p>\n\n<p>If you have a varchar field and you do:</p>\n\n<pre><code>where value &gt; '20.5'\n</code></pre>\n\n<p>Values like \"5\" will be in your result (as in a character based sort \"5\" comes after \"20.5\")</p>\n\n<p>You're going to be better off with separate columns for storage.</p>\n\n<p>Use Coalesce to merge them into one column if you need them merged in your results:</p>\n\n<pre><code>select [ID], [Name], Coalesce( [value_str], [value_num] )\nfrom [tablename]\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.97,
													"negative": 0.03
												},
												"text": "<p>On top of the more direct answers, I'd be remiss if I didn't mention <a href=\"http://ipython.scipy.org/\" rel=\"noreferrer\">iPython</a>.",
												"offset": 0,
												"length": 137
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.91,
													"negative": 0.06
												},
												"text": "Hit 'tab' to see the available methods, with autocompletion.</p>\n\n<p>And once you've found a method, try:</p>\n\n<pre><code>help(object.method) \n</code></pre>\n\n<p>to see the pydocs, method signature, etc.</p>\n\n<p>Ahh... <a href=\"http://en.wikipedia.org/wiki/REPL\" rel=\"noreferrer\">REPL</a>.</p>",
												"offset": 138,
												"length": 292
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34481",
										"Body": "<p>On top of the more direct answers, I'd be remiss if I didn't mention <a href=\"http://ipython.scipy.org/\" rel=\"noreferrer\">iPython</a>.\nHit 'tab' to see the available methods, with autocompletion.</p>\n\n<p>And once you've found a method, try:</p>\n\n<pre><code>help(object.method) \n</code></pre>\n\n<p>to see the pydocs, method signature, etc.</p>\n\n<p>Ahh... <a href=\"http://en.wikipedia.org/wiki/REPL\" rel=\"noreferrer\">REPL</a>.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>\n\n<pre><code>from AppKit import NSBeep\nNSBeep()\n</code></pre>\n\n<p>to play the system alert.</p>",
												"offset": 0,
												"length": 246
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34482",
										"Body": "<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>\n\n<pre><code>from AppKit import NSBeep\nNSBeep()\n</code></pre>\n\n<p>to play the system alert.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.85,
													"neutral": 0.07,
													"negative": 0.08
												},
												"text": "<p>There is a slight performance benefit to setting the value in the declaration.",
												"offset": 0,
												"length": 81
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "If you set it in the constructor it is actually being set twice (first to the default value, then reset in the ctor).",
												"offset": 83,
												"length": 117
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "</p>",
												"offset": 202,
												"length": 4
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34484",
										"Body": "<p>There is a slight performance benefit to setting the value in the declaration.  If you set it in the constructor it is actually being set twice (first to the default value, then reset in the ctor).  </p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.09,
													"neutral": 0.9,
													"negative": 0.01
												},
												"text": "<p>I have a small JS function that does Ajax for me and another like it that adds in POST data to the request.",
												"offset": 0,
												"length": 110
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.1,
													"negative": 0.9
												},
												"text": "With Ajax being such a big topic with so many libraries about it, what am I missing from my function, is it insecure or something else worrying?</p>\n\n<pre><code>function loadPage(pagePath, displayElement)\n{\n    var xmlHttp;\n\n    try\n    {\n        // Firefox, Opera 8.0+, Safari\n        xmlHttp=new XMLHttpRequest();\n    }\n    catch (e)\n    {\n        // Internet Explorer\n        try\n        {\n            xmlHttp=new ActiveXObject(\"Msxml2.XMLHTTP\");\n        }\n        catch (e)\n        {\n            try\n            {\n                xmlHttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n            }\n            catch (e)\n            {\n                alert(\"Your browser does not support AJAX!",
												"offset": 111,
												"length": 690
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "\");\n                return false;\n            }\n        }\n    }\n\n    xmlHttp.onreadystatechange=function()\n    {\n        if(xmlHttp.readyState==4)\n        {\n            document.getElementById(displayElement).innerHTML = xmlHttp.responseText;\n        }\n    }\n\n    xmlHttp.open(\"GET\", pagePath, true);\n    xmlHttp.send(null);\n}\n</code></pre>",
												"offset": 801,
												"length": 340
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34486",
										"Body": "<p>I have a small JS function that does Ajax for me and another like it that adds in POST data to the request. With Ajax being such a big topic with so many libraries about it, what am I missing from my function, is it insecure or something else worrying?</p>\n\n<pre><code>function loadPage(pagePath, displayElement)\n{\n    var xmlHttp;\n\n    try\n    {\n        // Firefox, Opera 8.0+, Safari\n        xmlHttp=new XMLHttpRequest();\n    }\n    catch (e)\n    {\n        // Internet Explorer\n        try\n        {\n            xmlHttp=new ActiveXObject(\"Msxml2.XMLHTTP\");\n        }\n        catch (e)\n        {\n            try\n            {\n                xmlHttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n            }\n            catch (e)\n            {\n                alert(\"Your browser does not support AJAX!\");\n                return false;\n            }\n        }\n    }\n\n    xmlHttp.onreadystatechange=function()\n    {\n        if(xmlHttp.readyState==4)\n        {\n            document.getElementById(displayElement).innerHTML = xmlHttp.responseText;\n        }\n    }\n\n    xmlHttp.open(\"GET\", pagePath, true);\n    xmlHttp.send(null);\n}\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.18,
													"neutral": 0.12,
													"negative": 0.7
												},
												"text": "<p>Will limiting a query to one result record, improve performance in a large(ish) MySQL table if the table only has one matching result?</p>\n\n<p>for example</p>\n\n<pre><code> select * from people where name = \"Re0sless\" limit 1\n</code></pre>\n\n<p>if there is only one record with that name?",
												"offset": 0,
												"length": 289
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.07,
													"neutral": 0.92,
													"negative": 0.01
												},
												"text": "and what about if <code>name</code> was the primary key/ set to unique?",
												"offset": 290,
												"length": 71
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.93,
													"neutral": 0.05,
													"negative": 0.02
												},
												"text": "and is it worth updating the query or will the gain be minimal?</p>",
												"offset": 362,
												"length": 67
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34488",
										"Body": "<p>Will limiting a query to one result record, improve performance in a large(ish) MySQL table if the table only has one matching result?</p>\n\n<p>for example</p>\n\n<pre><code> select * from people where name = \"Re0sless\" limit 1\n</code></pre>\n\n<p>if there is only one record with that name? and what about if <code>name</code> was the primary key/ set to unique? and is it worth updating the query or will the gain be minimal?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p><a href=\"http://en.wikipedia.org/wiki/SHA-1\" rel=\"noreferrer\">SHA Hash functions</a></p>",
												"offset": 0,
												"length": 91
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34490",
										"Body": "<p><a href=\"http://en.wikipedia.org/wiki/SHA-1\" rel=\"noreferrer\">SHA Hash functions</a></p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<ol>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/60\" rel=\"nofollow noreferrer\">Web Developer Toolbar (Firefox Addon)</a></li>\n<li><a href=\"http://projects.nikhilk.net/WebDevHelper/\" rel=\"nofollow noreferrer\">Nikhil's Web Development Helper (IE Toolbar)</a></li>\n</ol>",
												"offset": 0,
												"length": 283
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34492",
										"Body": "<ol>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/60\" rel=\"nofollow noreferrer\">Web Developer Toolbar (Firefox Addon)</a></li>\n<li><a href=\"http://projects.nikhilk.net/WebDevHelper/\" rel=\"nofollow noreferrer\">Nikhil's Web Development Helper (IE Toolbar)</a></li>\n</ol>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.07,
													"neutral": 0.07,
													"negative": 0.86
												},
												"text": "<p>We have a few very large Excel workbooks (dozens of tabs, over a MB each, very complex calculations) with many dozens, perhaps hundreds of formulas that use the dreaded INDIRECT function.",
												"offset": 0,
												"length": 190
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.23,
													"neutral": 0.08,
													"negative": 0.69
												},
												"text": "These formulas are spread out throughout the workbook, and target several tables of data to look-up for values.</p>\n\n<p>Now I need to move the ranges of data that are targeted by these formulas to a different location in the same workbook.</p>\n\n<p>(The reason is not particularly relevant, but interesting on its own.",
												"offset": 191,
												"length": 317
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.73,
													"neutral": 0.17,
													"negative": 0.1
												},
												"text": "We need to run these things in Excel Calculation Services and the latency hit of loading each of the rather large tables one at a time proved to be unacceptably high.",
												"offset": 509,
												"length": 166
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "We are moving the tables in a contiguous range so we can load them all in one shot.",
												"offset": 676,
												"length": 83
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": ")</p>\n\n<p><strong>Is there any way to locate all the INDIRECT formulas that currently refer to the tables we want to move?</strong></p>\n\n<p>I don't need to do this on-line.",
												"offset": 759,
												"length": 172
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.2,
													"neutral": 0.03,
													"negative": 0.77
												},
												"text": "I'll happily take something that takes 4 hours to run as long as it is reliable.</p>\n\n<p>Be aware that the .Precedent, .Dependent, etc methods only track direct formulas.</p>\n\n<p>(Also, rewriting the spreadsheets in <em>whatever</em> is not an option for us).</p>\n\n<p>Thanks!</p>",
												"offset": 932,
												"length": 279
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34493",
										"Body": "<p>We have a few very large Excel workbooks (dozens of tabs, over a MB each, very complex calculations) with many dozens, perhaps hundreds of formulas that use the dreaded INDIRECT function. These formulas are spread out throughout the workbook, and target several tables of data to look-up for values.</p>\n\n<p>Now I need to move the ranges of data that are targeted by these formulas to a different location in the same workbook.</p>\n\n<p>(The reason is not particularly relevant, but interesting on its own. We need to run these things in Excel Calculation Services and the latency hit of loading each of the rather large tables one at a time proved to be unacceptably high. We are moving the tables in a contiguous range so we can load them all in one shot.)</p>\n\n<p><strong>Is there any way to locate all the INDIRECT formulas that currently refer to the tables we want to move?</strong></p>\n\n<p>I don't need to do this on-line. I'll happily take something that takes 4 hours to run as long as it is reliable.</p>\n\n<p>Be aware that the .Precedent, .Dependent, etc methods only track direct formulas.</p>\n\n<p>(Also, rewriting the spreadsheets in <em>whatever</em> is not an option for us).</p>\n\n<p>Thanks!</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.87,
													"negative": 0.13
												},
												"text": "<p>A couple more::</p>\n\n<ol>\n<li>IE Explorer Toolbar  </li>\n<li>Firefox Developer Toolbar </li>\n</ol>",
												"offset": 0,
												"length": 101
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34496",
										"Body": "<p>A couple more::</p>\n\n<ol>\n<li>IE Explorer Toolbar  </li>\n<li>Firefox Developer Toolbar </li>\n</ol>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.94,
													"negative": 0.06
												},
												"text": "<p>I believe the LIMIT is something done after the data set is found and the result set is being built up so I wouldn't expect it to make any difference at all.",
												"offset": 0,
												"length": 160
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.73,
													"neutral": 0.14,
													"negative": 0.13
												},
												"text": "Making name the primary key will have a significant positive effect though as it will result in an index being made for the column.</p>",
												"offset": 161,
												"length": 135
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34499",
										"Body": "<p>I believe the LIMIT is something done after the data set is found and the result set is being built up so I wouldn't expect it to make any difference at all. Making name the primary key will have a significant positive effect though as it will result in an index being made for the column.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.11,
													"neutral": 0,
													"negative": 0.89
												},
												"text": "<p>If the column has </p>\n\n<p><strong>a unique index: no,</strong> it's no faster</p>\n\n<p><strong>a non-unique index: maybe,</strong> because it will prevent sending any additional rows beyond the first matched, if any exist</p>\n\n<p><strong>no index: sometimes</strong></p>\n\n<ul>\n<li>if 1 or more rows match the query, <strong>yes</strong>, because the full table scan will be halted after the first row is matched.</li>\n<li>if no rows match the query, <strong>no</strong>, because it will need to complete a full table scan</li>\n</ul>",
												"offset": 0,
												"length": 535
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34500",
										"Body": "<p>If the column has </p>\n\n<p><strong>a unique index: no,</strong> it's no faster</p>\n\n<p><strong>a non-unique index: maybe,</strong> because it will prevent sending any additional rows beyond the first matched, if any exist</p>\n\n<p><strong>no index: sometimes</strong></p>\n\n<ul>\n<li>if 1 or more rows match the query, <strong>yes</strong>, because the full table scan will be halted after the first row is matched.</li>\n<li>if no rows match the query, <strong>no</strong>, because it will need to complete a full table scan</li>\n</ul>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.97,
													"neutral": 0.02,
													"negative": 0.01
												},
												"text": "<p>If \"name\" is unique in the table, then there may still be a (very very minimal) gain in performance by putting the limit constraint on your query.",
												"offset": 0,
												"length": 149
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "If name is the primary key, there will likely be none.</p>",
												"offset": 150,
												"length": 58
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34501",
										"Body": "<p>If \"name\" is unique in the table, then there may still be a (very very minimal) gain in performance by putting the limit constraint on your query. If name is the primary key, there will likely be none.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.01,
													"negative": 0.98
												},
												"text": "<p>Here's what I did:</p>\n\n<pre><code>&lt;link rel=\"Stylesheet\" type=\"text/css\" href=\"Stylesheet.css\" id=\"style\" runat=\"server\" visible=\"false\" /&gt;\n</code></pre>\n\n<p>It fools Visual Studio into thinking you've added a stylesheet to the page but it doesn't get rendered.</p>\n\n<hr>\n\n<p>Here's an even more concise way to do this with multiple references;</p>\n\n<pre><code>&lt;% if (false) { %&gt;\n    &lt;link rel=\"Stylesheet\" type=\"text/css\" href=\"Stylesheet.css\" /&gt;\n    &lt;script type=\"text/javascript\" src=\"js/jquery-1.2.6.js\" /&gt;\n&lt;% } %&gt;\n</code></pre>\n\n<p>As seen in <a href=\"http://haacked.com/archive/2008/11/21/combining-jquery-form-validation-and-ajax-submission-with-asp.net.aspx\" rel=\"noreferrer\">this blog post</a> from Phil Haack.</p>",
												"offset": 0,
												"length": 757
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34502",
										"Body": "<p>Here's what I did:</p>\n\n<pre><code>&lt;link rel=\"Stylesheet\" type=\"text/css\" href=\"Stylesheet.css\" id=\"style\" runat=\"server\" visible=\"false\" /&gt;\n</code></pre>\n\n<p>It fools Visual Studio into thinking you've added a stylesheet to the page but it doesn't get rendered.</p>\n\n<hr>\n\n<p>Here's an even more concise way to do this with multiple references;</p>\n\n<pre><code>&lt;% if (false) { %&gt;\n    &lt;link rel=\"Stylesheet\" type=\"text/css\" href=\"Stylesheet.css\" /&gt;\n    &lt;script type=\"text/javascript\" src=\"js/jquery-1.2.6.js\" /&gt;\n&lt;% } %&gt;\n</code></pre>\n\n<p>As seen in <a href=\"http://haacked.com/archive/2008/11/21/combining-jquery-form-validation-and-ajax-submission-with-asp.net.aspx\" rel=\"noreferrer\">this blog post</a> from Phil Haack.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.87,
													"negative": 0.13
												},
												"text": "<p>I use both Firefox and IE for Web Development and a few add-ons in each:</p>\n\n<p><strong>Firefox:</strong></p>\n\n<ul>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/1843\" rel=\"nofollow noreferrer\">Firebug</a></li>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/60\" rel=\"nofollow noreferrer\">Web Developer Toolbar</a></li>\n</ul>\n\n<p><strong>Internet Explorer:</strong></p>\n\n<ul>\n<li><a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=18359\" rel=\"nofollow noreferrer\">IE Developer Toolbar</a></li>\n<li><a href=\"http://www.fiddlertool.com/\" rel=\"nofollow noreferrer\">Fiddler</a></li>\n<li>Visual Studio for JS Debugging</li>\n</ul>",
												"offset": 0,
												"length": 668
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34504",
										"Body": "<p>I use both Firefox and IE for Web Development and a few add-ons in each:</p>\n\n<p><strong>Firefox:</strong></p>\n\n<ul>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/1843\" rel=\"nofollow noreferrer\">Firebug</a></li>\n<li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/60\" rel=\"nofollow noreferrer\">Web Developer Toolbar</a></li>\n</ul>\n\n<p><strong>Internet Explorer:</strong></p>\n\n<ul>\n<li><a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=18359\" rel=\"nofollow noreferrer\">IE Developer Toolbar</a></li>\n<li><a href=\"http://www.fiddlertool.com/\" rel=\"nofollow noreferrer\">Fiddler</a></li>\n<li>Visual Studio for JS Debugging</li>\n</ul>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.2,
													"negative": 0.78
												},
												"text": "<p>Is there anyway to have a sort of virtual static member in C++?</p>\n\n<p>For example:</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass(const string&amp; name) : _name(name) {}\n        string GetName() const { return _name; }\n        virtual void UseClass() = 0;\n    private:\n        const string _name;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(\"DerivedClass\") {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>I know this example is trivial, but if I have a vector of complex data that is going to be always the same for all derived class but is needed to be accessed from base class methods?</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass() {}\n        virtual string GetName() const = 0;\n        virtual void UseClass() = 0;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() {}\n        virtual string GetName() const { return _name; }\n        virtual void UseClass() { /* do something */ }\n    private:\n        static const string _name;\n};\n\nstring DerivedClass::_name = \"DerivedClass\";\n</code></pre>\n\n<p>This solution does not satify me because I need reimplement the member _name and its accessor GetName() in every class.",
												"offset": 0,
												"length": 1269
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "In my case I have several members that follows _name behavior and tenths of derived classes.</p>\n\n<p>Any idea?</p>",
												"offset": 1270,
												"length": 114
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34506",
										"Body": "<p>Is there anyway to have a sort of virtual static member in C++?</p>\n\n<p>For example:</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass(const string&amp; name) : _name(name) {}\n        string GetName() const { return _name; }\n        virtual void UseClass() = 0;\n    private:\n        const string _name;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(\"DerivedClass\") {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>I know this example is trivial, but if I have a vector of complex data that is going to be always the same for all derived class but is needed to be accessed from base class methods?</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass() {}\n        virtual string GetName() const = 0;\n        virtual void UseClass() = 0;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() {}\n        virtual string GetName() const { return _name; }\n        virtual void UseClass() { /* do something */ }\n    private:\n        static const string _name;\n};\n\nstring DerivedClass::_name = \"DerivedClass\";\n</code></pre>\n\n<p>This solution does not satify me because I need reimplement the member _name and its accessor GetName() in every class. In my case I have several members that follows _name behavior and tenths of derived classes.</p>\n\n<p>Any idea?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>The browser displays the bullets because the style property \"display\" is initially set to \"list-item\".",
												"offset": 0,
												"length": 105
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.3,
													"negative": 0.67
												},
												"text": "Changing the display property to \"inline\" cancels all the special styles that list items get.",
												"offset": 106,
												"length": 93
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "You should be able to simulate it with the :before selector and the content property, but IE (at least through version 7) doesn't support them.",
												"offset": 200,
												"length": 143
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0.01,
													"negative": 0
												},
												"text": "Simulating it with a background image is probably the best cross-browser way to do it.</p>",
												"offset": 344,
												"length": 90
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34507",
										"Body": "<p>The browser displays the bullets because the style property \"display\" is initially set to \"list-item\". Changing the display property to \"inline\" cancels all the special styles that list items get. You should be able to simulate it with the :before selector and the content property, but IE (at least through version 7) doesn't support them. Simulating it with a background image is probably the best cross-browser way to do it.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>To answer your questions in order:\n 1) yes, if there is no index on name.",
												"offset": 0,
												"length": 76
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "The query will end as soon as it finds the first record.",
												"offset": 78,
												"length": 56
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "take off the limit and it has to do a full table scan every time.",
												"offset": 136,
												"length": 65
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.94,
													"negative": 0.03
												},
												"text": "2) no.",
												"offset": 203,
												"length": 6
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.78,
													"neutral": 0.21,
													"negative": 0.01
												},
												"text": "primary/unique keys are guaranteed to be unique.",
												"offset": 211,
												"length": 48
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "The query should stop running as soon as it finds the row.</p>",
												"offset": 261,
												"length": 62
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34508",
										"Body": "<p>To answer your questions in order:\n 1) yes, if there is no index on name.  The query will end as soon as it finds the first record.  take off the limit and it has to do a full table scan every time.\n 2) no.  primary/unique keys are guaranteed to be unique.  The query should stop running as soon as it finds the row.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>We have a large database on which we have DB side pagination.",
												"offset": 0,
												"length": 64
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.95,
													"negative": 0.05
												},
												"text": "This is quick, returning a page of 50 rows from millions of records in a small fraction of a second.</p>\n\n<p>Users can define their own sort, basically choosing what column to sort by.",
												"offset": 65,
												"length": 184
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Columns are dynamic - some have numeric values, some dates and some text.</p>\n\n<p>While most sort as expected text sorts in a dumb way.",
												"offset": 251,
												"length": 135
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.28,
													"negative": 0.7
												},
												"text": "Well, I say dumb, it makes sense to computers, but frustrates users.</p>\n\n<p>For instance, sorting by a string record id gives something like:</p>\n\n<pre><code>rec1\nrec10\nrec14\nrec2\nrec20\nrec3\nrec4\n</code></pre>\n\n<p>...and so on.</p>\n\n<p>I want this to take account of the number, so:</p>\n\n<pre><code>rec1\nrec2\nrec3\nrec4\nrec10\nrec14\nrec20\n</code></pre>\n\n<p>I can't control the input (otherwise I'd just format in leading 000s) and I can't rely on a single format - some are things like \"{alpha code}-{dept code}-{rec id}\".</p>\n\n<p>I know a few ways to do this in C#, but can't pull down all the records to sort them, as that would be to slow.</p>\n\n<p>Does anyone know a way to quickly apply a natural sort in Sql server?</p>\n\n<hr>\n\n<p>We're using:</p>\n\n<pre><code>ROW_NUMBER() over (order by {field name} asc)\n</code></pre>\n\n<p>And then we're paging by that.</p>\n\n<p>We can add triggers, although we wouldn't.",
												"offset": 387,
												"length": 908
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.26,
													"neutral": 0.19,
													"negative": 0.55
												},
												"text": "All their input is parametrised and the like, but I can't change the format - if they put in \"rec2\" and \"rec10\" they expect them to be returned just like that, and in natural order.</p>\n\n<hr>\n\n<p>We have valid user input that follows different formats for different clients.</p>\n\n<p>One might go rec1, rec2, rec3, ... rec100, rec101</p>\n\n<p>While another might go: grp1rec1, grp1rec2, ... grp20rec300, grp20rec301</p>\n\n<p>When I say we can't control the input I mean that we can't force users to change these standards - they have a value like grp1rec1 and I can't reformat it as grp01rec001, as that would be changing something used for lookups and linking to external systems.</p>\n\n<p>These formats vary a lot, but are often mixtures of letters and numbers.</p>\n\n<p>Sorting these in C# is easy - just break it up into <code>{ \"grp\", 20, \"rec\", 301 }</code> and then compare sequence values in turn.</p>\n\n<p>However there may be millions of records and the data is paged, I need the sort to be done on the SQL server.</p>\n\n<p>SQL server sorts by value, not comparison - in C# I can split the values out to compare, but in SQL I need some logic that (very quickly) gets a single value that consistently sorts.</p>\n\n<p>@moebius - your answer might work, but it does feel like an ugly compromise to add a sort-key for all these text values.</p>",
												"offset": 1296,
												"length": 1342
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34509",
										"Body": "<p>We have a large database on which we have DB side pagination. This is quick, returning a page of 50 rows from millions of records in a small fraction of a second.</p>\n\n<p>Users can define their own sort, basically choosing what column to sort by.  Columns are dynamic - some have numeric values, some dates and some text.</p>\n\n<p>While most sort as expected text sorts in a dumb way. Well, I say dumb, it makes sense to computers, but frustrates users.</p>\n\n<p>For instance, sorting by a string record id gives something like:</p>\n\n<pre><code>rec1\nrec10\nrec14\nrec2\nrec20\nrec3\nrec4\n</code></pre>\n\n<p>...and so on.</p>\n\n<p>I want this to take account of the number, so:</p>\n\n<pre><code>rec1\nrec2\nrec3\nrec4\nrec10\nrec14\nrec20\n</code></pre>\n\n<p>I can't control the input (otherwise I'd just format in leading 000s) and I can't rely on a single format - some are things like \"{alpha code}-{dept code}-{rec id}\".</p>\n\n<p>I know a few ways to do this in C#, but can't pull down all the records to sort them, as that would be to slow.</p>\n\n<p>Does anyone know a way to quickly apply a natural sort in Sql server?</p>\n\n<hr>\n\n<p>We're using:</p>\n\n<pre><code>ROW_NUMBER() over (order by {field name} asc)\n</code></pre>\n\n<p>And then we're paging by that.</p>\n\n<p>We can add triggers, although we wouldn't. All their input is parametrised and the like, but I can't change the format - if they put in \"rec2\" and \"rec10\" they expect them to be returned just like that, and in natural order.</p>\n\n<hr>\n\n<p>We have valid user input that follows different formats for different clients.</p>\n\n<p>One might go rec1, rec2, rec3, ... rec100, rec101</p>\n\n<p>While another might go: grp1rec1, grp1rec2, ... grp20rec300, grp20rec301</p>\n\n<p>When I say we can't control the input I mean that we can't force users to change these standards - they have a value like grp1rec1 and I can't reformat it as grp01rec001, as that would be changing something used for lookups and linking to external systems.</p>\n\n<p>These formats vary a lot, but are often mixtures of letters and numbers.</p>\n\n<p>Sorting these in C# is easy - just break it up into <code>{ \"grp\", 20, \"rec\", 301 }</code> and then compare sequence values in turn.</p>\n\n<p>However there may be millions of records and the data is paged, I need the sort to be done on the SQL server.</p>\n\n<p>SQL server sorts by value, not comparison - in C# I can split the values out to compare, but in SQL I need some logic that (very quickly) gets a single value that consistently sorts.</p>\n\n<p>@moebius - your answer might work, but it does feel like an ugly compromise to add a sort-key for all these text values.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "<p>When writing multithreaded applications, one of the most common problems experienced is race conditions.",
												"offset": 0,
												"length": 107
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.97,
													"negative": 0.03
												},
												"text": "</p>\n\n<p>My questions to the community are:</p>\n\n<p>What is the race condition?<br>\nHow do you detect them?<br>\nHow do you handle them?<br>\nFinally, how do you prevent them from occurring?",
												"offset": 109,
												"length": 188
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "</p>",
												"offset": 299,
												"length": 4
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34510",
										"Body": "<p>When writing multithreaded applications, one of the most common problems experienced is race conditions.  </p>\n\n<p>My questions to the community are:</p>\n\n<p>What is the race condition?<br>\nHow do you detect them?<br>\nHow do you handle them?<br>\nFinally, how do you prevent them from occurring?  </p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>By default it does it based on the reference to the object, but that means that it's the exact same object, so both would return the same hash.",
												"offset": 0,
												"length": 146
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.08,
													"neutral": 0.9,
													"negative": 0.02
												},
												"text": "But a hash should be based on the value, like in the case of the string class.",
												"offset": 147,
												"length": 78
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "\"a\" and \"b\" would have a different hash, but \"a\" and \"a\" would return the same hash.</p>",
												"offset": 226,
												"length": 88
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34511",
										"Body": "<p>By default it does it based on the reference to the object, but that means that it's the exact same object, so both would return the same hash. But a hash should be based on the value, like in the case of the string class. \"a\" and \"b\" would have a different hash, but \"a\" and \"a\" would return the same hash.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "<p>When writing multi-threaded applications, one of the most common problems experienced are deadlocks.",
												"offset": 0,
												"length": 103
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.23,
													"negative": 0.77
												},
												"text": "</p>\n\n<p>My questions to the community are:</p>\n\n<ol>\n<li><p>What is a deadlock?",
												"offset": 105,
												"length": 80
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.96,
													"negative": 0.04
												},
												"text": "</p></li>\n<li><p>How do you detect them?",
												"offset": 186,
												"length": 40
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "</p></li>\n<li><p>Do you handle them?",
												"offset": 227,
												"length": 36
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.89,
													"negative": 0.11
												},
												"text": "</p></li>\n<li><p>And finally, how do you prevent them from occurring?</p></li>\n</ol>",
												"offset": 265,
												"length": 84
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34512",
										"Body": "<p>When writing multi-threaded applications, one of the most common problems experienced are deadlocks.  </p>\n\n<p>My questions to the community are:</p>\n\n<ol>\n<li><p>What is a deadlock? </p></li>\n<li><p>How do you detect them? </p></li>\n<li><p>Do you handle them?  </p></li>\n<li><p>And finally, how do you prevent them from occurring?</p></li>\n</ol>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "<p>A bit of extra info that I've gained by painful experience: although NSNotificationCenter uses zeroing weak references when running under garbage collection, KVO does not.",
												"offset": 0,
												"length": 174
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "Thus, you can get away with not removing an NSNotificationCenter observer when using GC (when using retain/release, you still need to remove your observer), but you must still remove your KVO observers, as Chris describes.</p>",
												"offset": 175,
												"length": 226
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34513",
										"Body": "<p>A bit of extra info that I've gained by painful experience: although NSNotificationCenter uses zeroing weak references when running under garbage collection, KVO does not. Thus, you can get away with not removing an NSNotificationCenter observer when using GC (when using retain/release, you still need to remove your observer), but you must still remove your KVO observers, as Chris describes.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<pre><code>require 'digest/sha1'\nDigest::SHA1.hexdigest 'foo'\n</code></pre>",
												"offset": 0,
												"length": 75
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34514",
										"Body": "<pre><code>require 'digest/sha1'\nDigest::SHA1.hexdigest 'foo'\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "<p>Is there a standard convention (like phpdoc or python's docstring) for commenting C# code so that class documentation can be automatically generated from the source code?</p>",
												"offset": 0,
												"length": 177
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34516",
										"Body": "<p>Is there a standard convention (like phpdoc or python's docstring) for commenting C# code so that class documentation can be automatically generated from the source code?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>How do you sort an array of strings <a href=\"http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\" rel=\"nofollow noreferrer\">naturally</a> in different programming languages?",
												"offset": 0,
												"length": 192
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Post your implementation and what language it is in in the answer.</p>",
												"offset": 193,
												"length": 70
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34518",
										"Body": "<p>How do you sort an array of strings <a href=\"http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\" rel=\"nofollow noreferrer\">naturally</a> in different programming languages? Post your implementation and what language it is in in the answer.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.08,
													"negative": 0.88
												},
												"text": "<p>A semaphore is a programming concept that is frequently used to solve multi-threading problems.",
												"offset": 0,
												"length": 98
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "My question to the community: </p>\n\n<p>What is a semaphore and how do you use it?</p>",
												"offset": 100,
												"length": 85
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34519",
										"Body": "<p>A semaphore is a programming concept that is frequently used to solve multi-threading problems.  My question to the community: </p>\n\n<p>What is a semaphore and how do you use it?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.46,
													"neutral": 0.01,
													"negative": 0.53
												},
												"text": "<p>A <strong>lock</strong> occurs when multiple processes try to access the same resource at the same time.</p>\n\n<p>One process loses out and must wait for the other to finish.</p>\n\n<p>A <strong>deadlock</strong> occurs when the waiting process is still holding on to another resource that the first needs before it can finish.</p>\n\n<p>So, an example:</p>\n\n<p>Resource A and resource B are used by process X and process Y</p>\n\n<ul>\n<li>X starts to use A.</li>\n<li>X and Y try to start using B</li>\n<li>Y 'wins' and gets B first</li>\n<li>now Y needs to use A</li>\n<li>A is locked by X, which is waiting for Y</li>\n</ul>\n\n<p>The best way to avoid deadlocks is to avoid having processes cross over in this way.",
												"offset": 0,
												"length": 707
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Reduce the need to lock anything as much as you can.</p>\n\n<p>In databases avoid making lots of changes to different tables in a single transaction, avoid triggers and switch to optimistic/dirty/nolock reads as much as possible.</p>",
												"offset": 708,
												"length": 231
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34520",
										"Body": "<p>A <strong>lock</strong> occurs when multiple processes try to access the same resource at the same time.</p>\n\n<p>One process loses out and must wait for the other to finish.</p>\n\n<p>A <strong>deadlock</strong> occurs when the waiting process is still holding on to another resource that the first needs before it can finish.</p>\n\n<p>So, an example:</p>\n\n<p>Resource A and resource B are used by process X and process Y</p>\n\n<ul>\n<li>X starts to use A.</li>\n<li>X and Y try to start using B</li>\n<li>Y 'wins' and gets B first</li>\n<li>now Y needs to use A</li>\n<li>A is locked by X, which is waiting for Y</li>\n</ul>\n\n<p>The best way to avoid deadlocks is to avoid having processes cross over in this way. Reduce the need to lock anything as much as you can.</p>\n\n<p>In databases avoid making lots of changes to different tables in a single transaction, avoid triggers and switch to optimistic/dirty/nolock reads as much as possible.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "<p>Deadlock occurs when two threads aquire locks which prevent either of them from progressing.",
												"offset": 0,
												"length": 95
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "The best way to avoid them is with careful development.",
												"offset": 96,
												"length": 55
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.67,
													"neutral": 0.3,
													"negative": 0.03
												},
												"text": "Many embedded systems protect against them by using a watchdog timer (a timer which resets the system whenever if it hangs for a certain period of time).</p>",
												"offset": 152,
												"length": 157
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34522",
										"Body": "<p>Deadlock occurs when two threads aquire locks which prevent either of them from progressing. The best way to avoid them is with careful development. Many embedded systems protect against them by using a watchdog timer (a timer which resets the system whenever if it hangs for a certain period of time).</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.92,
													"negative": 0.08
												},
												"text": "<p>The trick is to use some simple JavaScript to resize the Flash DOM node:</p>\n\n<pre><code>function resizeFlash( h ) {\n    // \"flash-node-id\" is the ID of the embedded Flash movie\n    document.getElementById(\"flash-node-id\").style.height = h + \"px\";\n}\n</code></pre>\n\n<p>Which you call from within the Flash movie like this:</p>\n\n<pre><code>ExternalInterface.call(\"resizeFlash\", 400);\n</code></pre>\n\n<p>You don't actually need to have the JavaScript code externally, you can do it all from Flash if you want to:</p>\n\n<pre><code>ExternalInterface.call(\n    \"function( id, h ) { document.getElementById(id).style.height = h + 'px'; }\",\n    ExternalInterface.objectID,\n    400\n);\n</code></pre>\n\n<p>The anonymous function is just to be able to pass in the ID and height as parameters instead of concatenating them into the JavaScript string.</p>\n\n<p>I think that the JavaScript is fairly cross-platform.",
												"offset": 0,
												"length": 899
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "If you want to see a live example look at this site: <a href=\"http://www.talkoftheweather.com/\" rel=\"noreferrer\">talkoftheweather.com</a>.",
												"offset": 900,
												"length": 138
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.79,
													"negative": 0.17
												},
												"text": "It may not look as though it does anything, but it automatically resizes the Flash movie size to accommodate all the news items (it does this just after loading the news, which is done so quickly that you don't notice it happening).",
												"offset": 1039,
												"length": 232
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.96,
													"negative": 0.04
												},
												"text": "The resize forces the browser to show a vertical scroll bar.</p>",
												"offset": 1272,
												"length": 64
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34523",
										"Body": "<p>The trick is to use some simple JavaScript to resize the Flash DOM node:</p>\n\n<pre><code>function resizeFlash( h ) {\n    // \"flash-node-id\" is the ID of the embedded Flash movie\n    document.getElementById(\"flash-node-id\").style.height = h + \"px\";\n}\n</code></pre>\n\n<p>Which you call from within the Flash movie like this:</p>\n\n<pre><code>ExternalInterface.call(\"resizeFlash\", 400);\n</code></pre>\n\n<p>You don't actually need to have the JavaScript code externally, you can do it all from Flash if you want to:</p>\n\n<pre><code>ExternalInterface.call(\n    \"function( id, h ) { document.getElementById(id).style.height = h + 'px'; }\",\n    ExternalInterface.objectID,\n    400\n);\n</code></pre>\n\n<p>The anonymous function is just to be able to pass in the ID and height as parameters instead of concatenating them into the JavaScript string.</p>\n\n<p>I think that the JavaScript is fairly cross-platform. If you want to see a live example look at this site: <a href=\"http://www.talkoftheweather.com/\" rel=\"noreferrer\">talkoftheweather.com</a>. It may not look as though it does anything, but it automatically resizes the Flash movie size to accommodate all the news items (it does this just after loading the news, which is done so quickly that you don't notice it happening). The resize forces the browser to show a vertical scroll bar.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.08,
													"negative": 0.88
												},
												"text": "<p>A mutex is a programming concept that is frequently used to solve multi-threading problems.",
												"offset": 0,
												"length": 94
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "My question to the community: </p>\n\n<p>What is a mutex and how do you use it?</p>",
												"offset": 96,
												"length": 81
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34524",
										"Body": "<p>A mutex is a programming concept that is frequently used to solve multi-threading problems.  My question to the community: </p>\n\n<p>What is a mutex and how do you use it?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.94,
													"negative": 0.04
												},
												"text": "<p>A semaphore is a way to lock a resource so that it is guaranteed that while a piece of code is executed, only this piece of code has access to that resource.",
												"offset": 0,
												"length": 160
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "This keeps two threads from concurrently accesing a resource, which can cause problems.</p>",
												"offset": 162,
												"length": 91
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34529",
										"Body": "<p>A semaphore is a way to lock a resource so that it is guaranteed that while a piece of code is executed, only this piece of code has access to that resource.  This keeps two threads from concurrently accesing a resource, which can cause problems.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<pre><code>/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;param name=\"strFilePath\"&gt;&lt;/param&gt;\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/magazine/cc302121.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/magazine/cc302121.aspx</a></p>",
												"offset": 0,
												"length": 278
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34530",
										"Body": "<pre><code>/// &lt;summary&gt;\n///\n/// &lt;/summary&gt;\n/// &lt;param name=\"strFilePath\"&gt;&lt;/param&gt;\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/magazine/cc302121.aspx\" rel=\"nofollow noreferrer\">http://msdn.microsoft.com/en-us/magazine/cc302121.aspx</a></p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.67,
													"neutral": 0.32,
													"negative": 0.01
												},
												"text": "<p>C# has built in <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/codedoc\" rel=\"nofollow noreferrer\">documentation commands</a>\nHave fun!</p>",
												"offset": 0,
												"length": 150
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34532",
										"Body": "<p>C# has built in <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/codedoc\" rel=\"nofollow noreferrer\">documentation commands</a>\nHave fun!</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>You can use XML style comments, and use tools to pull those comments out into API documentation.</p>\n\n<p>Here is an example of the comment style:</p>\n\n<pre><code>/// &lt;summary&gt;\n/// Authenticates a user based on a username and password.",
												"offset": 0,
												"length": 243
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "/// &lt;/summary&gt;\n/// &lt;param name=\"username\"&gt;The username.&lt;/param&gt;\n/// &lt;param name=\"password\"&gt;The password.&lt;/param&gt;\n/// &lt;returns&gt;\n/// True, if authentication is successful, otherwise False.",
												"offset": 244,
												"length": 222
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.03,
													"negative": 0.97
												},
												"text": "/// &lt;/returns&gt;\n/// &lt;remarks&gt;\n/// For use with local systems\n/// &lt;/remarks&gt;\npublic override bool Authenticate(string username, string password)\n</code></pre>\n\n<p>Some items to facilitate this are:</p>\n\n<p><a href=\"http://www.roland-weigelt.de/ghostdoc/\" rel=\"noreferrer\">GhostDoc</a>, which give a single shortcut key to automatically generate comments for a class or method.",
												"offset": 467,
												"length": 392
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<a href=\"http://blogs.msdn.com/sandcastle/about.aspx\" rel=\"noreferrer\">Sandcastle</a>, which generates MSDN style documentation from XML comments.</p>",
												"offset": 860,
												"length": 150
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34533",
										"Body": "<p>You can use XML style comments, and use tools to pull those comments out into API documentation.</p>\n\n<p>Here is an example of the comment style:</p>\n\n<pre><code>/// &lt;summary&gt;\n/// Authenticates a user based on a username and password.\n/// &lt;/summary&gt;\n/// &lt;param name=\"username\"&gt;The username.&lt;/param&gt;\n/// &lt;param name=\"password\"&gt;The password.&lt;/param&gt;\n/// &lt;returns&gt;\n/// True, if authentication is successful, otherwise False.\n/// &lt;/returns&gt;\n/// &lt;remarks&gt;\n/// For use with local systems\n/// &lt;/remarks&gt;\npublic override bool Authenticate(string username, string password)\n</code></pre>\n\n<p>Some items to facilitate this are:</p>\n\n<p><a href=\"http://www.roland-weigelt.de/ghostdoc/\" rel=\"noreferrer\">GhostDoc</a>, which give a single shortcut key to automatically generate comments for a class or method.\n<a href=\"http://blogs.msdn.com/sandcastle/about.aspx\" rel=\"noreferrer\">Sandcastle</a>, which generates MSDN style documentation from XML comments.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.11,
													"neutral": 0.05,
													"negative": 0.84
												},
												"text": "<p>This most be the second most simple rollover effect, still I don't find any simple solution.</p>\n\n<p><strong>Wanted:</strong> I have a list of items and a corresponding list of slides (DIVs).",
												"offset": 0,
												"length": 194
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.09,
													"neutral": 0.57,
													"negative": 0.34
												},
												"text": "After loading, the first list item should be selected (bold) and the first slide should be visible.",
												"offset": 195,
												"length": 99
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "When the user hovers over another list item, that list item should be selected instead and the corresponding slide be shown.</p>\n\n<p>The following code works, but <em>is awful</em>.",
												"offset": 295,
												"length": 181
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "How can I get this behaviour in an elegant way?",
												"offset": 477,
												"length": 47
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.17,
													"neutral": 0.01,
													"negative": 0.82
												},
												"text": "jquery has dozens of animated and complicated rollover effects, but I didn't come up with a clean way for this effect.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction switchTo(id) {\n    document.getElementById('slide1').style.display=(id==1)?",
												"offset": 525,
												"length": 257
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "'block':'none';\n    document.getElementById('slide2').style.display=(id==2)?",
												"offset": 782,
												"length": 76
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "'block':'none';\n    document.getElementById('slide3').style.display=(id==3)?",
												"offset": 858,
												"length": 76
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.96,
													"negative": 0.04
												},
												"text": "'block':'none';\n    document.getElementById('slide4').style.display=(id==4)?",
												"offset": 934,
												"length": 76
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "'block':'none';\n    document.getElementById('switch1').style.fontWeight=(id==1)?",
												"offset": 1010,
												"length": 80
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "'bold':'normal';\n    document.getElementById('switch2').style.fontWeight=(id==2)?",
												"offset": 1090,
												"length": 81
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "'bold':'normal';\n    document.getElementById('switch3').style.fontWeight=(id==3)?",
												"offset": 1171,
												"length": 81
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "'bold':'normal';\n    document.getElementById('switch4').style.fontWeight=(id==4)?",
												"offset": 1252,
												"length": 81
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "'bold':'normal';\n}\n&lt;/script&gt;\n\n&lt;ul id=\"switches\"&gt;\n  &lt;li id=\"switch1\" onmouseover=\"switchTo(1);\" style=\"font-weight:bold;\"&gt;First slide&lt;/li&gt;\n  &lt;li id=\"switch2\" onmouseover=\"switchTo(2);\"&gt;Second slide&lt;/li&gt;\n  &lt;li id=\"switch3\" onmouseover=\"switchTo(3);\"&gt;Third slide&lt;/li&gt;\n  &lt;li id=\"switch4\" onmouseover=\"switchTo(4);\"&gt;Fourth slide&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=\"slides\"&gt;\n  &lt;div id=\"slide1\"&gt;Well well.&lt;/div&gt;\n  &lt;div id=\"slide2\" style=\"display:none;\"&gt;Oh no!&lt;/div&gt;\n  &lt;div id=\"slide3\" style=\"display:none;\"&gt;You again?&lt;/div&gt;\n  &lt;div id=\"slide4\" style=\"display:none;\"&gt;I'm gone!&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>",
												"offset": 1333,
												"length": 704
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34536",
										"Body": "<p>This most be the second most simple rollover effect, still I don't find any simple solution.</p>\n\n<p><strong>Wanted:</strong> I have a list of items and a corresponding list of slides (DIVs). After loading, the first list item should be selected (bold) and the first slide should be visible. When the user hovers over another list item, that list item should be selected instead and the corresponding slide be shown.</p>\n\n<p>The following code works, but <em>is awful</em>. How can I get this behaviour in an elegant way? jquery has dozens of animated and complicated rollover effects, but I didn't come up with a clean way for this effect.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction switchTo(id) {\n    document.getElementById('slide1').style.display=(id==1)?'block':'none';\n    document.getElementById('slide2').style.display=(id==2)?'block':'none';\n    document.getElementById('slide3').style.display=(id==3)?'block':'none';\n    document.getElementById('slide4').style.display=(id==4)?'block':'none';\n    document.getElementById('switch1').style.fontWeight=(id==1)?'bold':'normal';\n    document.getElementById('switch2').style.fontWeight=(id==2)?'bold':'normal';\n    document.getElementById('switch3').style.fontWeight=(id==3)?'bold':'normal';\n    document.getElementById('switch4').style.fontWeight=(id==4)?'bold':'normal';\n}\n&lt;/script&gt;\n\n&lt;ul id=\"switches\"&gt;\n  &lt;li id=\"switch1\" onmouseover=\"switchTo(1);\" style=\"font-weight:bold;\"&gt;First slide&lt;/li&gt;\n  &lt;li id=\"switch2\" onmouseover=\"switchTo(2);\"&gt;Second slide&lt;/li&gt;\n  &lt;li id=\"switch3\" onmouseover=\"switchTo(3);\"&gt;Third slide&lt;/li&gt;\n  &lt;li id=\"switch4\" onmouseover=\"switchTo(4);\"&gt;Fourth slide&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=\"slides\"&gt;\n  &lt;div id=\"slide1\"&gt;Well well.&lt;/div&gt;\n  &lt;div id=\"slide2\" style=\"display:none;\"&gt;Oh no!&lt;/div&gt;\n  &lt;div id=\"slide3\" style=\"display:none;\"&gt;You again?&lt;/div&gt;\n  &lt;div id=\"slide4\" style=\"display:none;\"&gt;I'm gone!&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.93,
													"neutral": 0.05,
													"negative": 0.02
												},
												"text": "<p>A race condition is a kind of bug, that happens only with certain temporal conditions.</p>\n\n<p>Example:\nImagine you have two threads, A and B.</p>\n\n<p>In Thread A:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>if( object.a != 0 )\n    object.avg = total / object.a\n</code></pre>\n\n<p>In Thread B:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>object.a = 0\n</code></pre>\n\n<p>If thread A is preempted just after having check that object.a is not null, B will do <code>a = 0</code>, and when thread A will gain the processor, it will do a \"divide by zero\".",
												"offset": 0,
												"length": 566
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.89,
													"negative": 0.1
												},
												"text": "</p>\n\n<p>This bug only happen when thread A is preempted just after the if statement, it's very rare, but it can happen.</p>",
												"offset": 567,
												"length": 124
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34537",
										"Body": "<p>A race condition is a kind of bug, that happens only with certain temporal conditions.</p>\n\n<p>Example:\nImagine you have two threads, A and B.</p>\n\n<p>In Thread A:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>if( object.a != 0 )\n    object.avg = total / object.a\n</code></pre>\n\n<p>In Thread B:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>object.a = 0\n</code></pre>\n\n<p>If thread A is preempted just after having check that object.a is not null, B will do <code>a = 0</code>, and when thread A will gain the processor, it will do a \"divide by zero\". </p>\n\n<p>This bug only happen when thread A is preempted just after the if statement, it's very rare, but it can happen.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.02,
													"negative": 0.98
												},
												"text": "<p>I would remove this line.</p>\n\n<pre><code>alert(\"Your browser does not support AJAX!\")",
												"offset": 0,
												"length": 89
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "</code></pre>\n\n<p>Shouting at the user in a language he probably doesn't understand is worse than failure.",
												"offset": 90,
												"length": 106
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.97,
													"negative": 0.01
												},
												"text": ":-)</p>",
												"offset": 197,
												"length": 7
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34539",
										"Body": "<p>I would remove this line.</p>\n\n<pre><code>alert(\"Your browser does not support AJAX!\")\n</code></pre>\n\n<p>Shouting at the user in a language he probably doesn't understand is worse than failure. :-)</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.8,
													"neutral": 0.14,
													"negative": 0.06
												},
												"text": "<p>This excerpt from the book <em>Programming in Lua</em> shows <a href=\"http://www.lua.org/pil/6.3.html\" rel=\"noreferrer\">how to make a proper tail recursion</a> (in Lua, but should apply to Lisp too) and why it's better.</p>\n\n<blockquote>\n  <p>A <em>tail call</em> [tail recursion] is a kind of goto dressed\n  as a call.",
												"offset": 0,
												"length": 322
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.94,
													"negative": 0.05
												},
												"text": "A tail call happens when a\n  function calls another as its last\n  action, so it has nothing else to do.",
												"offset": 323,
												"length": 103
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.83,
													"negative": 0.17
												},
												"text": "For instance, in the following code,\n  the call to <code>g</code> is a tail call:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function f (x)\n  return g(x)\nend\n</code></pre>\n  \n  <p>After <code>f</code> calls <code>g</code>, it has nothing else\n  to do.",
												"offset": 429,
												"length": 266
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.65,
													"negative": 0.35
												},
												"text": "In such situations, the program\n  does not need to return to the calling\n  function when the called function\n  ends.",
												"offset": 696,
												"length": 116
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.92,
													"negative": 0.08
												},
												"text": "Therefore, after the tail call,\n  the program does not need to keep any\n  information about the calling function\n  in the stack.",
												"offset": 813,
												"length": 128
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.97,
													"negative": 0.03
												},
												"text": "...</p>\n  \n  <p>Because a proper tail call uses no\n  stack space, there is no limit on the\n  number of \"nested\" tail calls that a\n  program can make.",
												"offset": 942,
												"length": 149
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.92,
													"negative": 0.08
												},
												"text": "For instance, we can\n  call the following function with any\n  number as argument; it will never\n  overflow the stack:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function foo (n)\n  if n &gt; 0 then return foo(n - 1) end\nend\n</code></pre>\n  \n  <p>... As I said earlier, a tail call is a\n  kind of goto.",
												"offset": 1092,
												"length": 315
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "As such, a quite useful\n  application of proper tail calls in\n  Lua is for programming state machines.",
												"offset": 1408,
												"length": 102
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Such applications can represent each\n  state by a function; to change state\n  is to go to (or to call) a specific\n  function.",
												"offset": 1513,
												"length": 125
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "As an example, let us\n  consider a simple maze game.",
												"offset": 1639,
												"length": 52
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "The maze\n  has several rooms, each with up to\n  four doors: north, south, east, and\n  west.",
												"offset": 1692,
												"length": 91
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "At each step, the user enters a\n  movement direction.",
												"offset": 1784,
												"length": 53
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "If there is a door\n  in that direction, the user goes to\n  the corresponding room; otherwise, the\n  program prints a warning.",
												"offset": 1838,
												"length": 125
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "The goal is\n  to go from an initial room to a final\n  room.</p>\n  \n  <p>This game is a typical state machine,\n  where the current room is the state.",
												"offset": 1964,
												"length": 148
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.96,
													"negative": 0
												},
												"text": "We can implement such maze with one\n  function for each room.",
												"offset": 2115,
												"length": 61
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "We use tail\n  calls to move from one room to\n  another.",
												"offset": 2177,
												"length": 55
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.03,
													"negative": 0.97
												},
												"text": "A small maze with four rooms\n  could look like this:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function room1 ()\n  local move = io.read()\n  if move == \"south\" then return room3()\n  elseif move == \"east\" then return room2()\n  else print(\"invalid move\")\n       return room1()   -- stay in the same room\n  end\nend\n\nfunction room2 ()\n  local move = io.read()\n  if move == \"south\" then return room4()\n  elseif move == \"west\" then return room1()\n  else print(\"invalid move\")\n       return room2()\n  end\nend\n\nfunction room3 ()\n  local move = io.read()\n  if move == \"north\" then return room1()\n  elseif move == \"east\" then return room4()\n  else print(\"invalid move\")\n       return room3()\n  end\nend\n\nfunction room4 ()\n  print(\"congratulations!\")",
												"offset": 2233,
												"length": 753
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.92,
													"negative": 0.08
												},
												"text": "end\n</code></pre>\n</blockquote>\n\n<p>So you see, when you make a recursive call like:</p>\n\n<pre class=\"lang-lua prettyprint-override\"><code>function x(n)\n  if n==0 then return 0\n  n= n-2\n  return x(n) + 1\nend\n</code></pre>\n\n<p>This is not tail recursive because you still have things to do (add 1) in that function after the recursive call is made.",
												"offset": 2987,
												"length": 347
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "If you input a very high number it will probably cause a stack overflow.</p>",
												"offset": 3335,
												"length": 76
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34540",
										"Body": "<p>This excerpt from the book <em>Programming in Lua</em> shows <a href=\"http://www.lua.org/pil/6.3.html\" rel=\"noreferrer\">how to make a proper tail recursion</a> (in Lua, but should apply to Lisp too) and why it's better.</p>\n\n<blockquote>\n  <p>A <em>tail call</em> [tail recursion] is a kind of goto dressed\n  as a call. A tail call happens when a\n  function calls another as its last\n  action, so it has nothing else to do.\n  For instance, in the following code,\n  the call to <code>g</code> is a tail call:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function f (x)\n  return g(x)\nend\n</code></pre>\n  \n  <p>After <code>f</code> calls <code>g</code>, it has nothing else\n  to do. In such situations, the program\n  does not need to return to the calling\n  function when the called function\n  ends. Therefore, after the tail call,\n  the program does not need to keep any\n  information about the calling function\n  in the stack. ...</p>\n  \n  <p>Because a proper tail call uses no\n  stack space, there is no limit on the\n  number of \"nested\" tail calls that a\n  program can make. For instance, we can\n  call the following function with any\n  number as argument; it will never\n  overflow the stack:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function foo (n)\n  if n &gt; 0 then return foo(n - 1) end\nend\n</code></pre>\n  \n  <p>... As I said earlier, a tail call is a\n  kind of goto. As such, a quite useful\n  application of proper tail calls in\n  Lua is for programming state machines.\n  Such applications can represent each\n  state by a function; to change state\n  is to go to (or to call) a specific\n  function. As an example, let us\n  consider a simple maze game. The maze\n  has several rooms, each with up to\n  four doors: north, south, east, and\n  west. At each step, the user enters a\n  movement direction. If there is a door\n  in that direction, the user goes to\n  the corresponding room; otherwise, the\n  program prints a warning. The goal is\n  to go from an initial room to a final\n  room.</p>\n  \n  <p>This game is a typical state machine,\n  where the current room is the state.\n  We can implement such maze with one\n  function for each room. We use tail\n  calls to move from one room to\n  another. A small maze with four rooms\n  could look like this:</p>\n  \n  <pre class=\"lang-lua prettyprint-override\"><code>function room1 ()\n  local move = io.read()\n  if move == \"south\" then return room3()\n  elseif move == \"east\" then return room2()\n  else print(\"invalid move\")\n       return room1()   -- stay in the same room\n  end\nend\n\nfunction room2 ()\n  local move = io.read()\n  if move == \"south\" then return room4()\n  elseif move == \"west\" then return room1()\n  else print(\"invalid move\")\n       return room2()\n  end\nend\n\nfunction room3 ()\n  local move = io.read()\n  if move == \"north\" then return room1()\n  elseif move == \"east\" then return room4()\n  else print(\"invalid move\")\n       return room3()\n  end\nend\n\nfunction room4 ()\n  print(\"congratulations!\")\nend\n</code></pre>\n</blockquote>\n\n<p>So you see, when you make a recursive call like:</p>\n\n<pre class=\"lang-lua prettyprint-override\"><code>function x(n)\n  if n==0 then return 0\n  n= n-2\n  return x(n) + 1\nend\n</code></pre>\n\n<p>This is not tail recursive because you still have things to do (add 1) in that function after the recursive call is made. If you input a very high number it will probably cause a stack overflow.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.88,
													"negative": 0.12
												},
												"text": "<blockquote>\n  <p>Rules 1 &amp; 3 are contradictory to me.</p>\n</blockquote>\n\n<p>To a certain extent, they are.",
												"offset": 0,
												"length": 111
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "The reason is simple: if an object is stored in a hash table and, by changing its value, you change its hash then the hash table has lost the value and you can't find it again by querying the hash table.",
												"offset": 112,
												"length": 203
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "It is important that while objects are stored in a hash table, they retain their hash value.</p>\n\n<p>To realize this it is often simplest to make hashable objects immutable, thus evading the whole problem.",
												"offset": 316,
												"length": 205
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.85,
													"negative": 0.15
												},
												"text": "It is however sufficient to make only those fields immutable that determine the hash value.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>struct Person {\n    public readonly string FirstName;\n    public readonly string Name;\n    public readonly DateTime Birthday;\n\n    public int ShoeSize;\n}\n</code></pre>\n\n<p>People rarely change their birthday and most people never change their name (except when marrying).",
												"offset": 522,
												"length": 419
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "However, their shoe size may grow arbitrarily, or even shrink.",
												"offset": 942,
												"length": 62
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.05,
													"neutral": 0.91,
													"negative": 0.04
												},
												"text": "It is therefore reasonable to identify people using their birthday and name but not their shoe size.",
												"offset": 1005,
												"length": 100
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.18,
													"negative": 0.81
												},
												"text": "The hash value should reflect this:</p>\n\n<pre><code>public int GetHashCode() {\n    return FirstName.GetHashCode() ^ Name.GetHashCode() ^ Birthday.GetHashCode();\n}\n</code></pre>",
												"offset": 1106,
												"length": 176
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34541",
										"Body": "<blockquote>\n  <p>Rules 1 &amp; 3 are contradictory to me.</p>\n</blockquote>\n\n<p>To a certain extent, they are. The reason is simple: if an object is stored in a hash table and, by changing its value, you change its hash then the hash table has lost the value and you can't find it again by querying the hash table. It is important that while objects are stored in a hash table, they retain their hash value.</p>\n\n<p>To realize this it is often simplest to make hashable objects immutable, thus evading the whole problem. It is however sufficient to make only those fields immutable that determine the hash value.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>struct Person {\n    public readonly string FirstName;\n    public readonly string Name;\n    public readonly DateTime Birthday;\n\n    public int ShoeSize;\n}\n</code></pre>\n\n<p>People rarely change their birthday and most people never change their name (except when marrying). However, their shoe size may grow arbitrarily, or even shrink. It is therefore reasonable to identify people using their birthday and name but not their shoe size. The hash value should reflect this:</p>\n\n<pre><code>public int GetHashCode() {\n    return FirstName.GetHashCode() ^ Name.GetHashCode() ^ Birthday.GetHashCode();\n}\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>Microsoft uses \"<a href=\"http://msdn.microsoft.com/en-us/library/b2s063f7.aspx\" rel=\"nofollow noreferrer\">XML Documentation Comments</a>\" which will give IDE intellisense descriptions and also allow you to auto-generate MSDN-style documentation using a tool such as Sandcastle if you turn on the generation of the XML file output.</p>\n\n<p>To turn on the generation of the XML file for documentation, right click on a project in visual studio, click \"Properties\" and go to the \"Build\" tab.",
												"offset": 0,
												"length": 491
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Towards the bottom you can specify a location for your XML comments output file.</p>",
												"offset": 492,
												"length": 84
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34543",
										"Body": "<p>Microsoft uses \"<a href=\"http://msdn.microsoft.com/en-us/library/b2s063f7.aspx\" rel=\"nofollow noreferrer\">XML Documentation Comments</a>\" which will give IDE intellisense descriptions and also allow you to auto-generate MSDN-style documentation using a tool such as Sandcastle if you turn on the generation of the XML file output.</p>\n\n<p>To turn on the generation of the XML file for documentation, right click on a project in visual studio, click \"Properties\" and go to the \"Build\" tab. Towards the bottom you can specify a location for your XML comments output file.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>I am writing a Browser Helper Object for ie7, and I need to detect DOM modification (i.e.",
												"offset": 0,
												"length": 92
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "via AJAX).",
												"offset": 93,
												"length": 10
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0,
													"negative": 0.99
												},
												"text": "So far I couldn't find any feasible solution.</p>",
												"offset": 104,
												"length": 49
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34544",
										"Body": "<p>I am writing a Browser Helper Object for ie7, and I need to detect DOM modification (i.e. via AJAX).\nSo far I couldn't find any feasible solution.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.03,
													"negative": 0.97
												},
												"text": "<p>A deadlock happens when a thread is waiting for something that never occurs.</p>\n\n<p>Typically, it happens when a thread is waiting on a mutex or semaphore that was never released by the previous owner.</p>\n\n<p>It also frequently happens when you have a situation involving two threads and two locks like this:</p>\n\n<pre><code>Thread 1               Thread 2\n\nLock1-&gt;Lock();         Lock2-&gt;Lock();\nWaitForLock2();        WaitForLock1();   &lt;-- Oops!",
												"offset": 0,
												"length": 460
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.95,
													"negative": 0.05
												},
												"text": "</code></pre>\n\n<p>You generally detect them because things that you expect to happen never do, or the application hangs entirely.</p>",
												"offset": 461,
												"length": 133
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34546",
										"Body": "<p>A deadlock happens when a thread is waiting for something that never occurs.</p>\n\n<p>Typically, it happens when a thread is waiting on a mutex or semaphore that was never released by the previous owner.</p>\n\n<p>It also frequently happens when you have a situation involving two threads and two locks like this:</p>\n\n<pre><code>Thread 1               Thread 2\n\nLock1-&gt;Lock();         Lock2-&gt;Lock();\nWaitForLock2();        WaitForLock1();   &lt;-- Oops!\n</code></pre>\n\n<p>You generally detect them because things that you expect to happen never do, or the application hangs entirely.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.62,
													"negative": 0.36
												},
												"text": "<p>The way that windows locks open files might cause an issue requiring you to hook into the Volume Shadowcopy Service.",
												"offset": 0,
												"length": 119
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "</p>\n\n<p>About two years ago this fellow ported the algorithm to C#.",
												"offset": 121,
												"length": 68
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "I haven't taken a look at the code (or the provided binary), but it might be a place to start looking or someone to try contacting.<br>\n<a href=\"http://www.russiantequila.com/wordpress/?p=8\" rel=\"noreferrer\">http://www.russiantequila.com/wordpress/?p=8</a></p>",
												"offset": 191,
												"length": 260
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34547",
										"Body": "<p>The way that windows locks open files might cause an issue requiring you to hook into the Volume Shadowcopy Service.  </p>\n\n<p>About two years ago this fellow ported the algorithm to C#.  I haven't taken a look at the code (or the provided binary), but it might be a place to start looking or someone to try contacting.<br>\n<a href=\"http://www.russiantequila.com/wordpress/?p=8\" rel=\"noreferrer\">http://www.russiantequila.com/wordpress/?p=8</a></p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.95,
													"negative": 0.05
												},
												"text": "<p>When you have a multi-threaded application, the different threads sometimes share a common resource, such as a variable or similar.",
												"offset": 0,
												"length": 134
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.45,
													"neutral": 0.29,
													"negative": 0.26
												},
												"text": "This shared source often cannot be accessed at the same time, so a construct is needed to ensure that only one thread is using that resource at a time.</p>\n\n<p>The concept is called \"mutual exclusion\" (short Mutex), and is a way to ensure that only one thread is allowed inside that area, using that resource etc.</p>\n\n<p>How to use them is language specific, but is often (if not always) based on a operating system mutex.</p>\n\n<p>Some languages doesn't need this construct, due to the paradigm, for example functional programming (Haskell, ML are good examples).</p>",
												"offset": 135,
												"length": 568
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34548",
										"Body": "<p>When you have a multi-threaded application, the different threads sometimes share a common resource, such as a variable or similar. This shared source often cannot be accessed at the same time, so a construct is needed to ensure that only one thread is using that resource at a time.</p>\n\n<p>The concept is called \"mutual exclusion\" (short Mutex), and is a way to ensure that only one thread is allowed inside that area, using that resource etc.</p>\n\n<p>How to use them is language specific, but is often (if not always) based on a operating system mutex.</p>\n\n<p>Some languages doesn't need this construct, due to the paradigm, for example functional programming (Haskell, ML are good examples).</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>A race condition occurs when two or more threads can access shared data and they try to change it at the same time.",
												"offset": 0,
												"length": 118
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.96,
													"negative": 0.04
												},
												"text": "Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data.",
												"offset": 119,
												"length": 163
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e.",
												"offset": 283,
												"length": 97
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "both threads are \"racing\" to access/change the data.",
												"offset": 381,
												"length": 52
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "</p>\n\n<p>Problems often occur when one thread does a \"check-then-act\" (e.g.",
												"offset": 434,
												"length": 75
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "\"check\" if the value is X, then \"act\" to do something that depends on the value being X) and another thread does something to the value in between the \"check\" and the \"act\".",
												"offset": 510,
												"length": 173
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.76,
													"negative": 0.24
												},
												"text": "E.g:</p>\n\n<pre><code>if (x == 5) // The \"Check\"\n{\n   y = x * 2; // The \"Act\"\n\n   // If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above,\n   // y will not be equal to 10.\n}",
												"offset": 684,
												"length": 194
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.91,
													"negative": 0.09
												},
												"text": "</code></pre>\n\n<p>The point being, y could be 10, or it could be anything, depending on whether another thread changed x in between the check and act.",
												"offset": 879,
												"length": 150
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.96,
													"negative": 0.04
												},
												"text": "You have no real way of knowing.</p>\n\n<p>In order to prevent race conditions from occurring, you would typically put a lock around the shared data to ensure only one thread can access the data at a time.",
												"offset": 1030,
												"length": 203
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.56,
													"negative": 0.42
												},
												"text": "This would mean something like this:</p>\n\n<pre><code>// Obtain lock for x\nif (x == 5)\n{\n   y = x * 2; // Now, nothing can change x until the lock is released.",
												"offset": 1234,
												"length": 158
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "// Therefore y = 10\n}\n// release lock for x\n</code></pre>",
												"offset": 1408,
												"length": 57
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34550",
										"Body": "<p>A race condition occurs when two or more threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are \"racing\" to access/change the data. </p>\n\n<p>Problems often occur when one thread does a \"check-then-act\" (e.g. \"check\" if the value is X, then \"act\" to do something that depends on the value being X) and another thread does something to the value in between the \"check\" and the \"act\". E.g:</p>\n\n<pre><code>if (x == 5) // The \"Check\"\n{\n   y = x * 2; // The \"Act\"\n\n   // If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above,\n   // y will not be equal to 10.\n}\n</code></pre>\n\n<p>The point being, y could be 10, or it could be anything, depending on whether another thread changed x in between the check and act. You have no real way of knowing.</p>\n\n<p>In order to prevent race conditions from occurring, you would typically put a lock around the shared data to ensure only one thread can access the data at a time. This would mean something like this:</p>\n\n<pre><code>// Obtain lock for x\nif (x == 5)\n{\n   y = x * 2; // Now, nothing can change x until the lock is released. \n              // Therefore y = 10\n}\n// release lock for x\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.55,
													"negative": 0.45
												},
												"text": "<p>Mutual Exclusion.",
												"offset": 0,
												"length": 20
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.69,
													"negative": 0.31
												},
												"text": "Here's the Wikipedia entry on it:</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Mutual_exclusion\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Mutual_exclusion</a></p>\n\n<p>The point of a mutex is to synchronize two threads.",
												"offset": 21,
												"length": 224
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.25,
													"negative": 0.75
												},
												"text": "When you have two threads attempting to access a single resource, the general pattern is to have the first block of code attempting access to set the mutex before entering the code.",
												"offset": 246,
												"length": 181
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.14,
													"negative": 0.85
												},
												"text": "When the second code block attempts access, it sees the mutex is set and waits until the first block of code is complete (and un-sets the mutex), then continues.</p>\n\n<p>Specific details of how this is accomplished obviously varies greatly by programming language.</p>",
												"offset": 428,
												"length": 268
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34551",
										"Body": "<p>Mutual Exclusion. Here's the Wikipedia entry on it:</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Mutual_exclusion\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Mutual_exclusion</a></p>\n\n<p>The point of a mutex is to synchronize two threads. When you have two threads attempting to access a single resource, the general pattern is to have the first block of code attempting access to set the mutex before entering the code. When the second code block attempts access, it sees the mutex is set and waits until the first block of code is complete (and un-sets the mutex), then continues.</p>\n\n<p>Specific details of how this is accomplished obviously varies greatly by programming language.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>A Mutex is a mutually exclusive flag.",
												"offset": 0,
												"length": 40
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.31,
													"neutral": 0.65,
													"negative": 0.04
												},
												"text": "It acts as a gate keeper to a section of code allowing one thread in and blocking access to all others.",
												"offset": 42,
												"length": 103
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.93,
													"negative": 0.05
												},
												"text": "This ensures that the code being controled will only be hit by a single thread at a time.",
												"offset": 147,
												"length": 89
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "Just be sure to release the mutex when you are done.",
												"offset": 238,
												"length": 52
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": ":)</p>",
												"offset": 291,
												"length": 6
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34556",
										"Body": "<p>A Mutex is a mutually exclusive flag.  It acts as a gate keeper to a section of code allowing one thread in and blocking access to all others.  This ensures that the code being controled will only be hit by a single thread at a time.  Just be sure to release the mutex when you are done. :)</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>When I am having a big heated discussion at work, I use a rubber chicken which I keep in my desk for just such occasions.",
												"offset": 0,
												"length": 124
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "The person holding the chicken is the only person who is allowed to talk.",
												"offset": 126,
												"length": 73
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.93,
													"negative": 0.07
												},
												"text": "If you don't hold the chicken you cannot speak.",
												"offset": 201,
												"length": 47
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "You can only indicate that you want the chicken and wait until you get it before you speak.",
												"offset": 250,
												"length": 91
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "Once you have finished speaking, you can hand the chicken back to the moderator who will hand it to the next person to speak.",
												"offset": 343,
												"length": 125
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.97,
													"negative": 0.03
												},
												"text": "This ensures that people do not speak over each other, and also have their own space to talk.</p>\n\n<p>Replace Chicken with Mutex and person with thread and you basically have the concept of a mutex.</p>\n\n<p>Of course, there is no such thing as a rubber mutex.",
												"offset": 470,
												"length": 259
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.9,
													"negative": 0.09
												},
												"text": "Only rubber chicken.",
												"offset": 731,
												"length": 20
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.55,
													"neutral": 0.07,
													"negative": 0.38
												},
												"text": "My cats once had a rubber mouse, but they ate it.</p>\n\n<p>Of course, before you use the rubber chicken, you need to ask yourself whether you actually need 5 people in one room and would it not just be easier with one person in the room on their own doing all the work.",
												"offset": 753,
												"length": 268
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "Actually, this is just extending the analogy, but you get the idea.</p>",
												"offset": 1023,
												"length": 71
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34558",
										"Body": "<p>When I am having a big heated discussion at work, I use a rubber chicken which I keep in my desk for just such occasions.  The person holding the chicken is the only person who is allowed to talk.  If you don't hold the chicken you cannot speak.  You can only indicate that you want the chicken and wait until you get it before you speak.  Once you have finished speaking, you can hand the chicken back to the moderator who will hand it to the next person to speak.  This ensures that people do not speak over each other, and also have their own space to talk.</p>\n\n<p>Replace Chicken with Mutex and person with thread and you basically have the concept of a mutex.</p>\n\n<p>Of course, there is no such thing as a rubber mutex.  Only rubber chicken.  My cats once had a rubber mouse, but they ate it.</p>\n\n<p>Of course, before you use the rubber chicken, you need to ask yourself whether you actually need 5 people in one room and would it not just be easier with one person in the room on their own doing all the work.  Actually, this is just extending the analogy, but you get the idea.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "<p>Keep them display blocked, give them a width and float left.",
												"offset": 0,
												"length": 63
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.97,
													"negative": 0
												},
												"text": "</p>\n\n<p>That will make them sit by side, which is like inline, and should maintain the list style.",
												"offset": 64,
												"length": 99
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "</p>",
												"offset": 164,
												"length": 4
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34561",
										"Body": "<p>Keep them display blocked, give them a width and float left. </p>\n\n<p>That will make them sit by side, which is like inline, and should maintain the list style. </p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>A race condition is a situation on concurrent programming where two concurrent threads or processes compete for a resource and the resulting final state depends on who gets the resource first.</p>",
												"offset": 0,
												"length": 199
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34562",
										"Body": "<p>A race condition is a situation on concurrent programming where two concurrent threads or processes compete for a resource and the resulting final state depends on who gets the resource first.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "<p>The only thing that's wrong with this code (at least to me) is that you're not using a loop to process all elements.",
												"offset": 0,
												"length": 119
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.58,
													"negative": 0.39
												},
												"text": "Other than that, why not to it like that?</p>\n\n<p>And with loop, I mean grabbing the container element via a JQuery and iterating over all child elements – basically a one-liner.</p>",
												"offset": 120,
												"length": 182
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34564",
										"Body": "<p>The only thing that's wrong with this code (at least to me) is that you're not using a loop to process all elements. Other than that, why not to it like that?</p>\n\n<p>And with loop, I mean grabbing the container element via a JQuery and iterating over all child elements – basically a one-liner.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>Additionally, how can I format it as a string padded with zeros?</p>",
												"offset": 0,
												"length": 71
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34565",
										"Body": "<p>Additionally, how can I format it as a string padded with zeros?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "<p>Not sure what MSDN documentation you are referring to.",
												"offset": 0,
												"length": 57
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.88,
													"negative": 0.09
												},
												"text": "Looking at the current documentation on Object.GetHashCode (<a href=\"http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx\" rel=\"noreferrer\">http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx</a>) provides the following \"rules\":</p>\n\n<ul>\n<li><p>If two objects compare as equal, the GetHashCode method for each object must return the same value.",
												"offset": 58,
												"length": 382
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.35,
													"negative": 0.64
												},
												"text": "However, if two objects do not compare as equal, the GetHashCode methods for the two object do not have to return different values.",
												"offset": 441,
												"length": 131
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.79,
													"negative": 0.2
												},
												"text": "</p></li>\n<li><p>The GetHashCode method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's Equals method.",
												"offset": 573,
												"length": 217
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.75,
													"negative": 0.25
												},
												"text": "Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again.",
												"offset": 791,
												"length": 152
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.92,
													"neutral": 0.08,
													"negative": 0
												},
												"text": "</p></li>\n<li><p>For the best performance, a hash function must generate a random distribution for all input.",
												"offset": 944,
												"length": 109
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.79,
													"negative": 0.21
												},
												"text": "</p></li>\n</ul>\n\n<p>If you are referring to the second bullet point, the key phrases here are \"as long as there is no modification to the object state\" and \"true only for the current execution of an application\".",
												"offset": 1054,
												"length": 212
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "</p>\n\n<p>Also from the documentation, </p>\n\n<blockquote>\n  <p>A hash function is used to quickly generate a number (hash code) that corresponds to the <strong>value</strong> of an object.",
												"offset": 1267,
												"length": 187
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "Hash functions are usually specific to each Type and must use at least one of the <strong>instance</strong> fields as input.",
												"offset": 1455,
												"length": 124
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.31,
													"neutral": 0.24,
													"negative": 0.45
												},
												"text": "[<em>Emphasis added is mine.</em>]</p>\n</blockquote>\n\n<p>As for the actual implementation, it clearly states that derived classes can defer to the Object.GetHashCode implementation <strong>if and only if</strong> that derived class defines value equality to be reference equality and the type is not a value type.",
												"offset": 1580,
												"length": 313
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.09,
													"negative": 0.9
												},
												"text": "In other words, the default implementation of Object.GetHashCode is going to be based on reference equality since there are no real instance fields to use and, therefore, does not guarantee unique return values for different objects.",
												"offset": 1894,
												"length": 233
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Otherwise, your implementation should be specific to your type and should use at least one of your instance fields.",
												"offset": 2128,
												"length": 115
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.73,
													"negative": 0.23
												},
												"text": "As an example, the implementation of String.GetHashCode returns identical hash codes for identical string values, so two String objects return the same hash code if they represent the same string value, and uses all the characters in the string to generate that hash value.</p>",
												"offset": 2244,
												"length": 277
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34566",
										"Body": "<p>Not sure what MSDN documentation you are referring to. Looking at the current documentation on Object.GetHashCode (<a href=\"http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx\" rel=\"noreferrer\">http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx</a>) provides the following \"rules\":</p>\n\n<ul>\n<li><p>If two objects compare as equal, the GetHashCode method for each object must return the same value. However, if two objects do not compare as equal, the GetHashCode methods for the two object do not have to return different values. </p></li>\n<li><p>The GetHashCode method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's Equals method. Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again. </p></li>\n<li><p>For the best performance, a hash function must generate a random distribution for all input. </p></li>\n</ul>\n\n<p>If you are referring to the second bullet point, the key phrases here are \"as long as there is no modification to the object state\" and \"true only for the current execution of an application\". </p>\n\n<p>Also from the documentation, </p>\n\n<blockquote>\n  <p>A hash function is used to quickly generate a number (hash code) that corresponds to the <strong>value</strong> of an object. Hash functions are usually specific to each Type and must use at least one of the <strong>instance</strong> fields as input. [<em>Emphasis added is mine.</em>]</p>\n</blockquote>\n\n<p>As for the actual implementation, it clearly states that derived classes can defer to the Object.GetHashCode implementation <strong>if and only if</strong> that derived class defines value equality to be reference equality and the type is not a value type. In other words, the default implementation of Object.GetHashCode is going to be based on reference equality since there are no real instance fields to use and, therefore, does not guarantee unique return values for different objects. Otherwise, your implementation should be specific to your type and should use at least one of your instance fields. As an example, the implementation of String.GetHashCode returns identical hash codes for identical string values, so two String objects return the same hash code if they represent the same string value, and uses all the characters in the string to generate that hash value.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<blockquote>\n  <p>I guess I could create separate fields, then have a view that sort of coalesces them into a single logical column.",
												"offset": 0,
												"length": 132
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Any opinions on that?</p>\n</blockquote>\n\n<p>It depends on the source of the data.",
												"offset": 133,
												"length": 81
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.92,
													"neutral": 0,
													"negative": 0.08
												},
												"text": "If you are getting the data from users (or some other system) in some free-form manner and don't really care what type of data it is, then the best way to store it is the most generic manner (varchar, etc).",
												"offset": 216,
												"length": 206
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.69,
													"neutral": 0.29,
													"negative": 0.02
												},
												"text": "If the incoming data is more structured and you care about that structure, then it makes more sense to keep that structure in the database by using separate fields.</p>\n\n<p>From the viewpoint of a SELECT it doesn't really matter; you can store it either way and read it as the same schema.",
												"offset": 424,
												"length": 289
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.98,
													"neutral": 0.01,
													"negative": 0.01
												},
												"text": "Once you get into filters (as you mention) things get a bit more hairy, but still easily doable.",
												"offset": 715,
												"length": 96
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "However, you don't mention if you need to be able to update this data and if so, if you need to enforce any validation on the data.</p>\n\n<p>From the sounds of it, you need to do different types of searches based on the \"type\" of value being stored.",
												"offset": 813,
												"length": 248
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.89,
													"neutral": 0.08,
													"negative": 0.03
												},
												"text": "As such, it may make sense to add a Type field so that any filters can be quickly limited to the type of values that you care about.",
												"offset": 1063,
												"length": 132
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0,
													"negative": 0.01
												},
												"text": "Note, by Type I mean a more logical, application scope, Type; not the actual datatype being stored.</p>\n\n<p>My recommendation would be to use a single field with a Type column if you need to easily support UPDATEs or use multiple fields (or tables, if these are totally different data sets) if SELECTing and filtering is all that is needed.</p>",
												"offset": 1197,
												"length": 344
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34567",
										"Body": "<blockquote>\n  <p>I guess I could create separate fields, then have a view that sort of coalesces them into a single logical column. Any opinions on that?</p>\n</blockquote>\n\n<p>It depends on the source of the data.  If you are getting the data from users (or some other system) in some free-form manner and don't really care what type of data it is, then the best way to store it is the most generic manner (varchar, etc).  If the incoming data is more structured and you care about that structure, then it makes more sense to keep that structure in the database by using separate fields.</p>\n\n<p>From the viewpoint of a SELECT it doesn't really matter; you can store it either way and read it as the same schema.  Once you get into filters (as you mention) things get a bit more hairy, but still easily doable.  However, you don't mention if you need to be able to update this data and if so, if you need to enforce any validation on the data.</p>\n\n<p>From the sounds of it, you need to do different types of searches based on the \"type\" of value being stored.  As such, it may make sense to add a Type field so that any filters can be quickly limited to the type of values that you care about.  Note, by Type I mean a more logical, application scope, Type; not the actual datatype being stored.</p>\n\n<p>My recommendation would be to use a single field with a Type column if you need to easily support UPDATEs or use multiple fields (or tables, if these are totally different data sets) if SELECTing and filtering is all that is needed.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.12,
													"neutral": 0.86,
													"negative": 0.02
												},
												"text": "<p>I am taking a class that requires Python.",
												"offset": 0,
												"length": 44
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.89,
													"neutral": 0,
													"negative": 0.11
												},
												"text": "We will review the language in class next week, and I am a quick study on new languages, but I was wondering if there are any really great Python books I can grab while I am struggling through the basics of setting up my IDE, server environment and all those other \"gotchas\" that come with a new programming language.",
												"offset": 45,
												"length": 317
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.06,
													"neutral": 0.91,
													"negative": 0.03
												},
												"text": "Suggestions?</p>",
												"offset": 363,
												"length": 16
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34570",
										"Body": "<p>I am taking a class that requires Python. We will review the language in class next week, and I am a quick study on new languages, but I was wondering if there are any really great Python books I can grab while I am struggling through the basics of setting up my IDE, server environment and all those other \"gotchas\" that come with a new programming language. Suggestions?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>How do I unit test (using xUnit) a class that has internal private methods, fields or nested classes?",
												"offset": 0,
												"length": 104
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Or a function that is made private by having <a href=\"https://stackoverflow.com/questions/1358400/what-is-external-linkage-and-internal-linkage\">internal linkage</a> (<code>static</code> in C/C++) or is in a private (<a href=\"https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions\">anonymous</a>) namespace?</p>\n\n<p>It seems bad to change the access modifier for a method or function just to be able to run a test.",
												"offset": 105,
												"length": 451
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "</p>",
												"offset": 557,
												"length": 4
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34571",
										"Body": "<p>How do I unit test (using xUnit) a class that has internal private methods, fields or nested classes? Or a function that is made private by having <a href=\"https://stackoverflow.com/questions/1358400/what-is-external-linkage-and-internal-linkage\">internal linkage</a> (<code>static</code> in C/C++) or is in a private (<a href=\"https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions\">anonymous</a>) namespace?</p>\n\n<p>It seems bad to change the access modifier for a method or function just to be able to run a test. </p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.09,
													"neutral": 0.84,
													"negative": 0.07
												},
												"text": "<p>Rules 1 &amp; 3 aren't really a contradiction.</p>\n\n<p>For a reference type the hash code is derived from a reference to the object - change an object's property and the reference is the same.</p>\n\n<p>For value types the hash code is derived from the value, change a property of a value type and you get a completely new instance of the value type.</p>",
												"offset": 0,
												"length": 355
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34573",
										"Body": "<p>Rules 1 &amp; 3 aren't really a contradiction.</p>\n\n<p>For a reference type the hash code is derived from a reference to the object - change an object's property and the reference is the same.</p>\n\n<p>For value types the hash code is derived from the value, change a property of a value type and you get a completely new instance of the value type.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>In C#, the common mutex used is the <a href=\"http://en.wikipedia.org/wiki/Monitor_(synchronization)\" rel=\"noreferrer\">Monitor</a>.",
												"offset": 0,
												"length": 133
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "The type is '<a href=\"http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx\" rel=\"noreferrer\">System.Threading.Monitor</a>'.",
												"offset": 134,
												"length": 140
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "It may also be used implicitly via the '<a href=\"http://msdn.microsoft.com/en-us/library/c5kehkcz(VS.80).aspx\" rel=\"noreferrer\">lock(Object)</a>' statement.",
												"offset": 275,
												"length": 156
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.04,
													"negative": 0.96
												},
												"text": "One example of its use is when constructing a Singleton class.</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>private static readonly Object instanceLock = new Object();\nprivate static MySingleton instance;\npublic static MySingleton Instance\n{\n    lock(instanceLock)\n    {\n        if(instance == null)\n        {\n            instance = new MySingleton();\n        }\n        return instance;\n    }\n}\n</code></pre>\n\n<p>The lock statement using the private lock object creates a critical section.",
												"offset": 432,
												"length": 497
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.94,
													"negative": 0.04
												},
												"text": "Requiring each thread to wait until the previous is finished.",
												"offset": 930,
												"length": 61
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "The first thread will enter the section and initialize the instance.",
												"offset": 992,
												"length": 68
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.84,
													"negative": 0.16
												},
												"text": "The second thread will wait, get into the section, and get the initialized instance.</p>\n\n<p>Any sort of synchronization of a static member may use the lock statement similarly.</p>",
												"offset": 1061,
												"length": 181
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34574",
										"Body": "<p>In C#, the common mutex used is the <a href=\"http://en.wikipedia.org/wiki/Monitor_(synchronization)\" rel=\"noreferrer\">Monitor</a>. The type is '<a href=\"http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx\" rel=\"noreferrer\">System.Threading.Monitor</a>'. It may also be used implicitly via the '<a href=\"http://msdn.microsoft.com/en-us/library/c5kehkcz(VS.80).aspx\" rel=\"noreferrer\">lock(Object)</a>' statement. One example of its use is when constructing a Singleton class.</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>private static readonly Object instanceLock = new Object();\nprivate static MySingleton instance;\npublic static MySingleton Instance\n{\n    lock(instanceLock)\n    {\n        if(instance == null)\n        {\n            instance = new MySingleton();\n        }\n        return instance;\n    }\n}\n</code></pre>\n\n<p>The lock statement using the private lock object creates a critical section. Requiring each thread to wait until the previous is finished. The first thread will enter the section and initialize the instance. The second thread will wait, get into the section, and get the initialized instance.</p>\n\n<p>Any sort of synchronization of a static member may use the lock statement similarly.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>Race conditions occur in multi-threaded applications or multi-process systems.",
												"offset": 0,
												"length": 81
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.94,
													"negative": 0.04
												},
												"text": "A race condition, at its most basic, is anything that makes the assumption that two things not in the same thread or process will happen in a particular order, without taking steps to ensure that they do.",
												"offset": 83,
												"length": 204
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.97,
													"negative": 0.03
												},
												"text": "This happens commonly when two threads are passing messages by setting and checking member variables of a class both can access.",
												"offset": 289,
												"length": 128
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.02,
													"negative": 0.98
												},
												"text": "There's almost always a race condition when one thread calls sleep to give another thread time to finish a task (unless that sleep is in a loop, with some checking mechanism).</p>\n\n<p>Tools for preventing race conditions are dependent on the language and OS, but some comon ones are mutexes, critical sections, and signals.",
												"offset": 419,
												"length": 323
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "Mutexes are good when you want to make sure you're the only one doing something.",
												"offset": 744,
												"length": 80
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "Signals are good when you want to make sure someone else has finished doing something.",
												"offset": 826,
												"length": 86
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.26,
													"neutral": 0.04,
													"negative": 0.7
												},
												"text": "Minimizing shared resources can also help prevent unexpected behaviors</p>\n\n<p>Detecting race conditions can be difficult, but there are a couple signs.",
												"offset": 914,
												"length": 152
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.46,
													"negative": 0.54
												},
												"text": "Code which relies heavily on sleeps is prone to race conditions, so first check for calls to sleep in the affected code.",
												"offset": 1068,
												"length": 120
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.94,
													"negative": 0.03
												},
												"text": "Adding particularly long sleeps can also be used for debugging to try and force a particular order of events.",
												"offset": 1190,
												"length": 109
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.98,
													"neutral": 0.01,
													"negative": 0.01
												},
												"text": "This can be useful for reproducing the behavior, seeing if you can make it disappear by changing the timing of things, and for testing solutions put in place.",
												"offset": 1301,
												"length": 158
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.49,
													"negative": 0.5
												},
												"text": "The sleeps should be removed after debugging.</p>\n\n<p>The signature sign that one has a race condition though, is if there's an issue that only occurs intermittently on some machines.",
												"offset": 1461,
												"length": 183
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Common bugs would be crashes and deadlocks.",
												"offset": 1646,
												"length": 43
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "With logging, you should be able to find the affected area and work back from there.</p>",
												"offset": 1691,
												"length": 88
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34578",
										"Body": "<p>Race conditions occur in multi-threaded applications or multi-process systems.  A race condition, at its most basic, is anything that makes the assumption that two things not in the same thread or process will happen in a particular order, without taking steps to ensure that they do.  This happens commonly when two threads are passing messages by setting and checking member variables of a class both can access.  There's almost always a race condition when one thread calls sleep to give another thread time to finish a task (unless that sleep is in a loop, with some checking mechanism).</p>\n\n<p>Tools for preventing race conditions are dependent on the language and OS, but some comon ones are mutexes, critical sections, and signals.  Mutexes are good when you want to make sure you're the only one doing something.  Signals are good when you want to make sure someone else has finished doing something.  Minimizing shared resources can also help prevent unexpected behaviors</p>\n\n<p>Detecting race conditions can be difficult, but there are a couple signs.  Code which relies heavily on sleeps is prone to race conditions, so first check for calls to sleep in the affected code.  Adding particularly long sleeps can also be used for debugging to try and force a particular order of events.  This can be useful for reproducing the behavior, seeing if you can make it disappear by changing the timing of things, and for testing solutions put in place.  The sleeps should be removed after debugging.</p>\n\n<p>The signature sign that one has a race condition though, is if there's an issue that only occurs intermittently on some machines.  Common bugs would be crashes and deadlocks.  With logging, you should be able to find the affected area and work back from there.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "<p>I've recently been working with a MySQL database, and using MySQL workbench to design the Database.</p>\n\n<p>When I use the export to SQL function, so I can actually get the layout in to the Database, I get:</p>\n\n<blockquote>\n  <p>\"Error 1005: Cannot create table\"</p>\n</blockquote>\n\n<p>This appears to be related to Foreign Keys in the create table statement.</p>\n\n<p>Does anybody have a work around for this that doesn't involve taking the constraints out and putting them back in later?",
												"offset": 0,
												"length": 491
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.89,
													"neutral": 0.04,
													"negative": 0.07
												},
												"text": "That's a less than ideal solution given the size of the database.</p>",
												"offset": 493,
												"length": 69
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34579",
										"Body": "<p>I've recently been working with a MySQL database, and using MySQL workbench to design the Database.</p>\n\n<p>When I use the export to SQL function, so I can actually get the layout in to the Database, I get:</p>\n\n<blockquote>\n  <p>\"Error 1005: Cannot create table\"</p>\n</blockquote>\n\n<p>This appears to be related to Foreign Keys in the create table statement.</p>\n\n<p>Does anybody have a work around for this that doesn't involve taking the constraints out and putting them back in later?  That's a less than ideal solution given the size of the database.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.82,
													"negative": 0.18
												},
												"text": "<p>I expected the two <code>span</code> tags in the following sample to display next to each other, instead they display one below the other.",
												"offset": 0,
												"length": 141
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.15,
													"neutral": 0.83,
													"negative": 0.02
												},
												"text": "If I set the <code>width</code> of the class <code>span</code>.right to 49% they display next to each other.",
												"offset": 142,
												"length": 108
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.84,
													"neutral": 0.02,
													"negative": 0.14
												},
												"text": "I am not able to figure out why the right span is pushed down like the right span has some invisible <code>padding/margin</code> which makes it take more than 50%.",
												"offset": 251,
												"length": 163
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0.89,
													"negative": 0.07
												},
												"text": "I am trying to get this done without using html tables.",
												"offset": 415,
												"length": 55
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.56,
													"neutral": 0.44,
													"negative": 0
												},
												"text": "Any ideas?</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test Page&lt;/title&gt;\n    &lt;style type='text/css'&gt;\n        * {\n            margin: 0;\n        }\n\n        html,body{\n            margin:0;\n            padding:0;\n            height:100%;\n            width:100%;\n            border:none;\n        }\n\n        div.header{\n            width:100%;\n            height:80px;\n            vertical-align:top;\n        }\n\n        span.left {\n            height:80px;\n            width:50%;\n            display:inline-block;\n            background-color:pink;\n        }\n\n        span.right {\n            vertical-align:top; \n            display:inline-block;\n            text-align:right;\n            height:80px;\n            width:50%;\n            background-color:red;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class='header'&gt;\n        &lt;span class='left'&gt;Left Span 50% width&lt;/span&gt;\n        &lt;span class='right'&gt;Right Span 50% width&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<hr>\n\n<p>Thanks for the explanation.",
												"offset": 471,
												"length": 1100
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0.01,
													"negative": 0
												},
												"text": "The <code>float:left</code> works beautifully with expected results in FF 3.1.",
												"offset": 1572,
												"length": 78
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Unfortunately, in IE6 the right side span renders 50% of the 50%, in effect giving it a width of 25% of the browser window.",
												"offset": 1651,
												"length": 123
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.72,
													"neutral": 0.21,
													"negative": 0.07
												},
												"text": "Setting its width to 100% achieves the desired results but breaks in FF 3.1 which is in standards compliance mode and I understand that.",
												"offset": 1775,
												"length": 136
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.34,
													"neutral": 0.2,
													"negative": 0.46
												},
												"text": "Getting it to work both in FF and IE 6, without resorting to hacks or using multiple CSS sheets has been a challenge</p>",
												"offset": 1912,
												"length": 120
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34581",
										"Body": "<p>I expected the two <code>span</code> tags in the following sample to display next to each other, instead they display one below the other. If I set the <code>width</code> of the class <code>span</code>.right to 49% they display next to each other. I am not able to figure out why the right span is pushed down like the right span has some invisible <code>padding/margin</code> which makes it take more than 50%. I am trying to get this done without using html tables. Any ideas?</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test Page&lt;/title&gt;\n    &lt;style type='text/css'&gt;\n        * {\n            margin: 0;\n        }\n\n        html,body{\n            margin:0;\n            padding:0;\n            height:100%;\n            width:100%;\n            border:none;\n        }\n\n        div.header{\n            width:100%;\n            height:80px;\n            vertical-align:top;\n        }\n\n        span.left {\n            height:80px;\n            width:50%;\n            display:inline-block;\n            background-color:pink;\n        }\n\n        span.right {\n            vertical-align:top; \n            display:inline-block;\n            text-align:right;\n            height:80px;\n            width:50%;\n            background-color:red;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class='header'&gt;\n        &lt;span class='left'&gt;Left Span 50% width&lt;/span&gt;\n        &lt;span class='right'&gt;Right Span 50% width&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<hr>\n\n<p>Thanks for the explanation. The <code>float:left</code> works beautifully with expected results in FF 3.1. Unfortunately, in IE6 the right side span renders 50% of the 50%, in effect giving it a width of 25% of the browser window. Setting its width to 100% achieves the desired results but breaks in FF 3.1 which is in standards compliance mode and I understand that. Getting it to work both in FF and IE 6, without resorting to hacks or using multiple CSS sheets has been a challenge</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>To generate the number call rand with the result of the expression \"10 to the power of 10\"</p>\n\n<pre><code>rand(10 ** 10)\n</code></pre>\n\n<p>To pad the number with zeros you can use the string format operator</p>\n\n<pre><code>'%010d' % rand(10 ** 10)\n</code></pre>\n\n<p>or the <code>rjust</code> method of string</p>\n\n<pre><code>rand(10 ** 10).to_s.rjust(10,'0')  \n</code></pre>",
												"offset": 0,
												"length": 378
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34582",
										"Body": "<p>To generate the number call rand with the result of the expression \"10 to the power of 10\"</p>\n\n<pre><code>rand(10 ** 10)\n</code></pre>\n\n<p>To pad the number with zeros you can use the string format operator</p>\n\n<pre><code>'%010d' % rand(10 ** 10)\n</code></pre>\n\n<p>or the <code>rjust</code> method of string</p>\n\n<pre><code>rand(10 ** 10).to_s.rjust(10,'0')  \n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>There's no need to use <code>mxmlc</code> on the command line just to be able to add compiler flags.",
												"offset": 0,
												"length": 103
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "Right click your project in the Flex Navigator, select Properties and then Flex Compiler in the dialog that appears.",
												"offset": 104,
												"length": 116
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.97,
													"negative": 0.01
												},
												"text": "There you can add any extra compiler flags.",
												"offset": 221,
												"length": 43
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "</p>\n\n<p>Not sure that there's very much to do though, more code means more compile time, that's just the way it is.",
												"offset": 265,
												"length": 116
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.96,
													"negative": 0.03
												},
												"text": "If you're not doing a release build (or whatever it's called in Flex Builder) it's unlikely that your compiler settings include <code>optimize</code> to begin with.",
												"offset": 382,
												"length": 164
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.19,
													"neutral": 0.7,
													"negative": 0.11
												},
												"text": "Better choices to try would be <code>-incremental</code> (which only recompiles the parts that have changed) and <code>-keep-generated-actionscript</code> (which stops the compiler from deleting the ActionScript files it has generated from your application's MXML files).</p>\n\n<p>I very much prefer using <code>mxmlc</code> on the command line (by way of Ant) compared to Flex Builder.",
												"offset": 547,
												"length": 385
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0.02,
													"negative": 0.95
												},
												"text": "Although I don't think that the latter compiles any slower, it feels more sluggish in every way.",
												"offset": 933,
												"length": 96
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.91,
													"negative": 0.07
												},
												"text": "Using Ant also makes it possible to do more than just compilation when building, and conditional compilation (only compile a SWF or SWC if the source code has actually changed).",
												"offset": 1030,
												"length": 177
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.11,
													"neutral": 0.88,
													"negative": 0.01
												},
												"text": "Check out <a href=\"http://blog.iconara.net/2008/02/22/quick-tips-to-speed-up-your-ant-build/\" rel=\"noreferrer\">a blog post of mine</a> for more info on that.</p>\n\n<p>What you could try is the <a href=\"http://labs.adobe.com/wiki/index.php/Flex_Compiler_Shell\" rel=\"noreferrer\">Flex Compiler Shell</a>, another command line tool that can speed things up.",
												"offset": 1208,
												"length": 352
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.11,
													"neutral": 0.86,
													"negative": 0.03
												},
												"text": "Basically it tries to keep as much as possible in memory between builds, so no need to wait for things like the JVM starting up (the Flex compiler is a Java application).",
												"offset": 1561,
												"length": 170
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "On the other hand this is sort of what Flex Builder does anyway.</p>",
												"offset": 1732,
												"length": 68
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34583",
										"Body": "<p>There's no need to use <code>mxmlc</code> on the command line just to be able to add compiler flags. Right click your project in the Flex Navigator, select Properties and then Flex Compiler in the dialog that appears. There you can add any extra compiler flags. </p>\n\n<p>Not sure that there's very much to do though, more code means more compile time, that's just the way it is. If you're not doing a release build (or whatever it's called in Flex Builder) it's unlikely that your compiler settings include <code>optimize</code> to begin with. Better choices to try would be <code>-incremental</code> (which only recompiles the parts that have changed) and <code>-keep-generated-actionscript</code> (which stops the compiler from deleting the ActionScript files it has generated from your application's MXML files).</p>\n\n<p>I very much prefer using <code>mxmlc</code> on the command line (by way of Ant) compared to Flex Builder. Although I don't think that the latter compiles any slower, it feels more sluggish in every way. Using Ant also makes it possible to do more than just compilation when building, and conditional compilation (only compile a SWF or SWC if the source code has actually changed). Check out <a href=\"http://blog.iconara.net/2008/02/22/quick-tips-to-speed-up-your-ant-build/\" rel=\"noreferrer\">a blog post of mine</a> for more info on that.</p>\n\n<p>What you could try is the <a href=\"http://labs.adobe.com/wiki/index.php/Flex_Compiler_Shell\" rel=\"noreferrer\">Flex Compiler Shell</a>, another command line tool that can speed things up. Basically it tries to keep as much as possible in memory between builds, so no need to wait for things like the JVM starting up (the Flex compiler is a Java application). On the other hand this is sort of what Flex Builder does anyway.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0.01,
													"negative": 0
												},
												"text": "<p>I expect that <a href=\"http://oreilly.com/catalog/9780596513986/\" rel=\"nofollow noreferrer\">Learning Python</a> is useful, and quick to read.</p>",
												"offset": 0,
												"length": 148
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34584",
										"Body": "<p>I expect that <a href=\"http://oreilly.com/catalog/9780596513986/\" rel=\"nofollow noreferrer\">Learning Python</a> is useful, and quick to read.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0.01,
													"negative": 0
												},
												"text": "<p>The best way to test a private method is via another public method.",
												"offset": 0,
												"length": 70
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "If this cannot be done, then one of the following conditions is true:</p>\n\n<ol>\n<li>The private method is dead code</li>\n<li>There is a design smell near the class that you are testing</li>\n<li>The method that you are trying to test should not be private</li>\n</ol>",
												"offset": 71,
												"length": 265
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34586",
										"Body": "<p>The best way to test a private method is via another public method. If this cannot be done, then one of the following conditions is true:</p>\n\n<ol>\n<li>The private method is dead code</li>\n<li>There is a design smell near the class that you are testing</li>\n<li>The method that you are trying to test should not be private</li>\n</ol>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.93,
													"neutral": 0.06,
													"negative": 0.01
												},
												"text": "<pre><code>float: left;\n</code></pre>\n\n<p>Try adding that to span.left</p>\n\n<p>It will cause it to float to the left (as suggested by the syntax).</p>\n\n<hr>\n\n<p>I am not a CSS expert by any means so please don't take this as unarguable fact but I find that when something is floated, it makes no difference to the vertical position of things below it.</p>\n\n<p>If you float the span.right to the right then add text beneath them you should get some interesting results, to stop these \"interesting results\" you can use \"clear: left/right/both\" which will cause the block with the clear styling to be under anything floated to the left/right/both.",
												"offset": 0,
												"length": 644
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.29,
													"neutral": 0.67,
													"negative": 0.04
												},
												"text": "<a href=\"http://w3schools.com/css/pr_class_clear.asp\" rel=\"nofollow noreferrer\">W3Schools</a> have a page on this property too.</p>\n\n<p>And welcome to Stackoverflow.</p>",
												"offset": 645,
												"length": 169
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34587",
										"Body": "<pre><code>float: left;\n</code></pre>\n\n<p>Try adding that to span.left</p>\n\n<p>It will cause it to float to the left (as suggested by the syntax).</p>\n\n<hr>\n\n<p>I am not a CSS expert by any means so please don't take this as unarguable fact but I find that when something is floated, it makes no difference to the vertical position of things below it.</p>\n\n<p>If you float the span.right to the right then add text beneath them you should get some interesting results, to stop these \"interesting results\" you can use \"clear: left/right/both\" which will cause the block with the clear styling to be under anything floated to the left/right/both. <a href=\"http://w3schools.com/css/pr_class_clear.asp\" rel=\"nofollow noreferrer\">W3Schools</a> have a page on this property too.</p>\n\n<p>And welcome to Stackoverflow.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "<p>When running my application I sometimes get an error about <code>too many files open</code>.</p>\n\n<p>Running <code>ulimit -a</code> reports that the limit is 1024.",
												"offset": 0,
												"length": 166
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "How do I increase the limit above 1024?",
												"offset": 168,
												"length": 39
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.08,
													"negative": 0.92
												},
												"text": "</p>\n\n<p><strong>Edit</strong>\n<code>ulimit -n 2048</code> results in a permission error.</p>",
												"offset": 209,
												"length": 93
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34588",
										"Body": "<p>When running my application I sometimes get an error about <code>too many files open</code>.</p>\n\n<p>Running <code>ulimit -a</code> reports that the limit is 1024.  How do I increase the limit above 1024?  </p>\n\n<p><strong>Edit</strong>\n<code>ulimit -n 2048</code> results in a permission error.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.95,
													"negative": 0.03
												},
												"text": "<p>I definitely prefer the merge methodology.</p>\n\n<p>I've used Visual Sourcesafe (hopefully never again), CVS, subversion and bzr.",
												"offset": 0,
												"length": 131
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "Visual sourcesafe enforces the \"checkout before editing\" methodology and can be painful.",
												"offset": 133,
												"length": 88
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.51,
													"neutral": 0,
													"negative": 0.49
												},
												"text": "CVS and subversion haven't been great at accepting merges historically, though I hear subversion 1.5 has improved that.</p>\n\n<p>I would recommend using a VCS that has been designed with frequent merging in mind from the start.",
												"offset": 223,
												"length": 226
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.05,
													"neutral": 0.91,
													"negative": 0.04
												},
												"text": "bzr is the one I've used that does this, but the other major distributed vcs systems (git and mercurial) also do.",
												"offset": 451,
												"length": 113
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "</p>\n\n<p>But ultimately I don't know of any research on this specific area.",
												"offset": 566,
												"length": 75
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.23,
													"neutral": 0.4,
													"negative": 0.37
												},
												"text": "In general there is very little research into efficiency of programming, <a href=\"https://rads.stackoverflow.com/amzn/click/com/0932633439\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Peopleware</a> being one of the notable exceptions.</p>",
												"offset": 643,
												"length": 247
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34589",
										"Body": "<p>I definitely prefer the merge methodology.</p>\n\n<p>I've used Visual Sourcesafe (hopefully never again), CVS, subversion and bzr.  Visual sourcesafe enforces the \"checkout before editing\" methodology and can be painful.  CVS and subversion haven't been great at accepting merges historically, though I hear subversion 1.5 has improved that.</p>\n\n<p>I would recommend using a VCS that has been designed with frequent merging in mind from the start.  bzr is the one I've used that does this, but the other major distributed vcs systems (git and mercurial) also do.  </p>\n\n<p>But ultimately I don't know of any research on this specific area.  In general there is very little research into efficiency of programming, <a href=\"https://rads.stackoverflow.com/amzn/click/com/0932633439\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Peopleware</a> being one of the notable exceptions.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>Generally a unit test is intended to exercise the public interface of a class or unit.",
												"offset": 0,
												"length": 89
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.86,
													"negative": 0.12
												},
												"text": "Therefore, private methods are implementation detail that you would not expect to test explicitly.</p>",
												"offset": 90,
												"length": 102
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34590",
										"Body": "<p>Generally a unit test is intended to exercise the public interface of a class or unit. Therefore, private methods are implementation detail that you would not expect to test explicitly.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.12,
													"negative": 0.87
												},
												"text": "<p>It seems like the answer is in the question - the method you suggested seems to be the right direction to go, except that if you have a big number of those shared members you might want to gather them into a struct or class and past that as the argument to the constructor of the base class.</p>\n\n<p>If you insist on having the \"shared\" members implemented as static members of the derived class, you might be able to auto-generate the code of the derived classes.",
												"offset": 0,
												"length": 467
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.41,
													"neutral": 0.06,
													"negative": 0.53
												},
												"text": "XSLT is a great tool for auto-generating simple classes.</p>\n\n<p>In general, the example doesn't show a need for \"virtual static\" members, because for purposes like these you don't actually need inheritance - instead you should use the base class and have it accept the appropriate values in the constructor - maybe creating a single instance of the arguments for each \"sub-type\" and passing a pointer to it to avoid duplication of the shared data.",
												"offset": 468,
												"length": 448
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.21,
													"negative": 0.78
												},
												"text": "Another similar approach is to use templates and pass as the template argument a class that provides all the relevant values (this is commonly referred to as the \"Policy\" pattern).</p>\n\n<p>To conclude - for the purpose of the original example, there is no need for such \"virtual static\" members.",
												"offset": 917,
												"length": 295
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.53,
													"neutral": 0.09,
													"negative": 0.38
												},
												"text": "If you still think they are needed for the code you are writing, please try to elaborate and add more context.</p>\n\n<p>Example of what I described above:</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass(const Descriptor&amp; desc) : _desc(desc) {}\n        string GetName() const { return _desc.name; }\n        int GetId() const { return _desc.Id; }\n        X GetX() connst { return _desc.X; }\n        virtual void UseClass() = 0;\n    private:\n        const Descriptor _desc;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(Descriptor(\"abc\", 1,...)) {}\n        virtual void UseClass() { /* do something */ }\n};\n\nclass DerDerClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(\"Wowzer\", 843,...) {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>I'd like to elaborate on this solution, and maybe give a solution to the de-initialization problem:</p>\n\n<p>With a small change, you can implement the design described above without necessarily create a new instance of the \"descriptor\" for each instance of a derived class.</p>\n\n<p>You can create a singleton object, DescriptorMap, that will hold the single instance of each descriptor, and use it when constructing the derived objects like so:</p>\n\n<pre><code>enum InstanceType {\n    Yellow,\n    Big,\n    BananaHammoc\n}\n\nclass DescriptorsMap{\n    public:\n        static Descriptor* GetDescriptor(InstanceType type) {\n            if ( _instance.Get() == null) {\n                _instance.reset(new DescriptorsMap());\n            }\n            return _instance.Get()-&gt; _descriptors[type];\n        }\n    private:\n        DescriptorsMap() {\n            descriptors[Yellow] = new Descriptor(\"Yellow\", 42, ...);\n            descriptors[Big] = new Descriptor(\"InJapan\", 17, ...)\n            ...\n        }\n\n        ~DescriptorsMap() {\n            /*Delete all the descriptors from the map*/\n        }\n\n        static autoptr&lt;DescriptorsMap&gt; _instance;\n        map&lt;InstanceType, Descriptor*&gt; _descriptors;\n}\n</code></pre>\n\n<p>Now we can do this:</p>\n\n<pre><code>class DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(DescriptorsMap.GetDescriptor(InstanceType.BananaHammoc)) {}\n        virtual void UseClass() { /* do something */ }\n};\n\nclass DerDerClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(DescriptorsMap.GetDescriptor(InstanceType.Yellow)) {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>At the end of execution, when the C runtime performs uninitializations, it also calls the destructor of static objects, including our autoptr, which in deletes our instance of the DescriptorsMap.</p>\n\n<p>So now we have a single instance of each descriptor that is also being deleted at the end of execution.</p>\n\n<p>Note that if the only purpose of the derived class is to supply the relevant \"descriptor\" data (i.e.",
												"offset": 1213,
												"length": 2961
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.08,
													"neutral": 0.76,
													"negative": 0.16
												},
												"text": "as opposed to implementing virtual functions) then you should make do with making the base class non-abstract, and just creating an instance with the appropriate descriptor each time.</p>",
												"offset": 4175,
												"length": 187
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34591",
										"Body": "<p>It seems like the answer is in the question - the method you suggested seems to be the right direction to go, except that if you have a big number of those shared members you might want to gather them into a struct or class and past that as the argument to the constructor of the base class.</p>\n\n<p>If you insist on having the \"shared\" members implemented as static members of the derived class, you might be able to auto-generate the code of the derived classes. XSLT is a great tool for auto-generating simple classes.</p>\n\n<p>In general, the example doesn't show a need for \"virtual static\" members, because for purposes like these you don't actually need inheritance - instead you should use the base class and have it accept the appropriate values in the constructor - maybe creating a single instance of the arguments for each \"sub-type\" and passing a pointer to it to avoid duplication of the shared data. Another similar approach is to use templates and pass as the template argument a class that provides all the relevant values (this is commonly referred to as the \"Policy\" pattern).</p>\n\n<p>To conclude - for the purpose of the original example, there is no need for such \"virtual static\" members. If you still think they are needed for the code you are writing, please try to elaborate and add more context.</p>\n\n<p>Example of what I described above:</p>\n\n<pre><code>class BaseClass {\n    public:\n        BaseClass(const Descriptor&amp; desc) : _desc(desc) {}\n        string GetName() const { return _desc.name; }\n        int GetId() const { return _desc.Id; }\n        X GetX() connst { return _desc.X; }\n        virtual void UseClass() = 0;\n    private:\n        const Descriptor _desc;\n};\n\n\nclass DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(Descriptor(\"abc\", 1,...)) {}\n        virtual void UseClass() { /* do something */ }\n};\n\nclass DerDerClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(\"Wowzer\", 843,...) {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>I'd like to elaborate on this solution, and maybe give a solution to the de-initialization problem:</p>\n\n<p>With a small change, you can implement the design described above without necessarily create a new instance of the \"descriptor\" for each instance of a derived class.</p>\n\n<p>You can create a singleton object, DescriptorMap, that will hold the single instance of each descriptor, and use it when constructing the derived objects like so:</p>\n\n<pre><code>enum InstanceType {\n    Yellow,\n    Big,\n    BananaHammoc\n}\n\nclass DescriptorsMap{\n    public:\n        static Descriptor* GetDescriptor(InstanceType type) {\n            if ( _instance.Get() == null) {\n                _instance.reset(new DescriptorsMap());\n            }\n            return _instance.Get()-&gt; _descriptors[type];\n        }\n    private:\n        DescriptorsMap() {\n            descriptors[Yellow] = new Descriptor(\"Yellow\", 42, ...);\n            descriptors[Big] = new Descriptor(\"InJapan\", 17, ...)\n            ...\n        }\n\n        ~DescriptorsMap() {\n            /*Delete all the descriptors from the map*/\n        }\n\n        static autoptr&lt;DescriptorsMap&gt; _instance;\n        map&lt;InstanceType, Descriptor*&gt; _descriptors;\n}\n</code></pre>\n\n<p>Now we can do this:</p>\n\n<pre><code>class DerivedClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(DescriptorsMap.GetDescriptor(InstanceType.BananaHammoc)) {}\n        virtual void UseClass() { /* do something */ }\n};\n\nclass DerDerClass : public BaseClass {\n    public:\n        DerivedClass() : BaseClass(DescriptorsMap.GetDescriptor(InstanceType.Yellow)) {}\n        virtual void UseClass() { /* do something */ }\n};\n</code></pre>\n\n<p>At the end of execution, when the C runtime performs uninitializations, it also calls the destructor of static objects, including our autoptr, which in deletes our instance of the DescriptorsMap.</p>\n\n<p>So now we have a single instance of each descriptor that is also being deleted at the end of execution.</p>\n\n<p>Note that if the only purpose of the derived class is to supply the relevant \"descriptor\" data (i.e. as opposed to implementing virtual functions) then you should make do with making the base class non-abstract, and just creating an instance with the appropriate descriptor each time.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "<p>The private methods are called by a public method, so the inputs to your public methods should also test private methods that are called by those public methods.",
												"offset": 0,
												"length": 164
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "When a public method fails, then that could be a failure in the private method.</p>",
												"offset": 165,
												"length": 83
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34594",
										"Body": "<p>The private methods are called by a public method, so the inputs to your public methods should also test private methods that are called by those public methods. When a public method fails, then that could be a failure in the private method.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "<p>What is a good Hash function?",
												"offset": 0,
												"length": 32
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.88,
													"neutral": 0,
													"negative": 0.12
												},
												"text": "I saw a lot of hash function and applications in my data structures courses in college, but I mostly got that it's pretty hard to make a good hash function.",
												"offset": 33,
												"length": 156
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.41,
													"neutral": 0.05,
													"negative": 0.54
												},
												"text": "As a rule of thumb to avoid collisions my professor said that:</p>\n\n<pre><code>function Hash(key)\n  return key mod PrimeNumber\nend\n</code></pre>\n\n<p>(mod is the % operator in C and similar languages)</p>\n\n<p>with the prime number to be the size of the hash table.",
												"offset": 190,
												"length": 263
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.42,
													"neutral": 0,
													"negative": 0.58
												},
												"text": "I get that is a somewhat good function to avoid collisions and a fast one, but how can I make a better one?",
												"offset": 454,
												"length": 107
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.9,
													"neutral": 0.09,
													"negative": 0.01
												},
												"text": "Is there better hash functions for string keys against numeric keys?</p>",
												"offset": 562,
												"length": 72
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34595",
										"Body": "<p>What is a good Hash function? I saw a lot of hash function and applications in my data structures courses in college, but I mostly got that it's pretty hard to make a good hash function. As a rule of thumb to avoid collisions my professor said that:</p>\n\n<pre><code>function Hash(key)\n  return key mod PrimeNumber\nend\n</code></pre>\n\n<p>(mod is the % operator in C and similar languages)</p>\n\n<p>with the prime number to be the size of the hash table. I get that is a somewhat good function to avoid collisions and a fast one, but how can I make a better one? Is there better hash functions for string keys against numeric keys?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.95,
													"negative": 0.05
												},
												"text": "<p>From this article: <a href=\"http://www.artima.com/suiterunner/private.html\" rel=\"nofollow noreferrer\">Testing Private Methods with JUnit and SuiteRunner</a> (Bill Venners), you basically have 4 options:</p>\n\n<blockquote>\n  <ol>\n  <li>Don't test private methods.</li>\n  <li>Give the methods package access.</li>\n  <li>Use a nested test class.</li>\n  <li>Use reflection.",
												"offset": 0,
												"length": 371
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "</li>\n  </ol>\n</blockquote>",
												"offset": 372,
												"length": 27
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34598",
										"Body": "<p>From this article: <a href=\"http://www.artima.com/suiterunner/private.html\" rel=\"nofollow noreferrer\">Testing Private Methods with JUnit and SuiteRunner</a> (Bill Venners), you basically have 4 options:</p>\n\n<blockquote>\n  <ol>\n  <li>Don't test private methods.</li>\n  <li>Give the methods package access.</li>\n  <li>Use a nested test class.</li>\n  <li>Use reflection. </li>\n  </ol>\n</blockquote>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "<p>If you've gotta stick to your current method of parsing, and it's a regex, you can use the <a href=\"http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php\" rel=\"nofollow noreferrer\">multi-line flag</a> \"m\" to span across multiple lines.</p>",
												"offset": 0,
												"length": 254
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34602",
										"Body": "<p>If you've gotta stick to your current method of parsing, and it's a regex, you can use the <a href=\"http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php\" rel=\"nofollow noreferrer\">multi-line flag</a> \"m\" to span across multiple lines.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "<p>Deadlocks will only occur when you have two or more locks that can be aquired at the same time and they are grabbed in different order.</p>\n\n<p>Ways to avoid having deadlocks are:</p>\n\n<ul>\n<li>avoid having locks (if possible), </li>\n<li>avoid having more than one lock</li>\n<li>always take the locks in the same order.</li>\n</ul>",
												"offset": 0,
												"length": 333
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34603",
										"Body": "<p>Deadlocks will only occur when you have two or more locks that can be aquired at the same time and they are grabbed in different order.</p>\n\n<p>Ways to avoid having deadlocks are:</p>\n\n<ul>\n<li>avoid having locks (if possible), </li>\n<li>avoid having more than one lock</li>\n<li>always take the locks in the same order.</li>\n</ul>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>I'd say that the main rule of thumb is not to roll your own.",
												"offset": 0,
												"length": 63
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.98,
													"negative": 0.01
												},
												"text": "Try to use something that has been thoroughly tested, e.g., SHA-1 or something along those lines.</p>",
												"offset": 64,
												"length": 101
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34606",
										"Body": "<p>I'd say that the main rule of thumb is not to roll your own. Try to use something that has been thoroughly tested, e.g., SHA-1 or something along those lines.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "<p>I loved <a href=\"http://www.diveintopython.net/toc/index.html\" rel=\"nofollow noreferrer\">Dive Into Python</a>, especially if you're a quick study.",
												"offset": 0,
												"length": 149
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "The beginning basics are all covered (and may move slowly for you), but the latter few chapters are great learning tools.</p>\n\n<p>Plus, Pilgrim is a pretty good writer.</p>",
												"offset": 151,
												"length": 172
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34608",
										"Body": "<p>I loved <a href=\"http://www.diveintopython.net/toc/index.html\" rel=\"nofollow noreferrer\">Dive Into Python</a>, especially if you're a quick study.  The beginning basics are all covered (and may move slowly for you), but the latter few chapters are great learning tools.</p>\n\n<p>Plus, Pilgrim is a pretty good writer.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "<p>Since you're already familiar with other languages and a quick study, I'd recommend <a href=\"http://books.google.com/books?id=6TEcaEzA8N0C\" rel=\"nofollow noreferrer\">Python in a Nutshell</a> by Alex Martelli, very concise and also useful later on for reference.</p>",
												"offset": 0,
												"length": 268
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34610",
										"Body": "<p>Since you're already familiar with other languages and a quick study, I'd recommend <a href=\"http://books.google.com/books?id=6TEcaEzA8N0C\" rel=\"nofollow noreferrer\">Python in a Nutshell</a> by Alex Martelli, very concise and also useful later on for reference.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "<p>What are some toolkits for developing 2D games in Python?",
												"offset": 0,
												"length": 60
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "An option that I have heard of is Pygame, but is there anything that has more range to do more things?",
												"offset": 61,
												"length": 102
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0,
													"negative": 0.99
												},
												"text": "What are the good and bad parts about the modules?</p>",
												"offset": 164,
												"length": 54
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34611",
										"Body": "<p>What are some toolkits for developing 2D games in Python? An option that I have heard of is Pygame, but is there anything that has more range to do more things? What are the good and bad parts about the modules?</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.77,
													"neutral": 0.23,
													"negative": 0
												},
												"text": "<p>Two good online-books, that also describes the basics of the environment is <a href=\"http://www.diveintopython.net/toc/index.html\" rel=\"nofollow noreferrer\">diveintopython.net</a> and  <a href=\"http://docs.python.org/tut/\" rel=\"nofollow noreferrer\">the \"official\" tutorial</a>.</p>",
												"offset": 0,
												"length": 284
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34613",
										"Body": "<p>Two good online-books, that also describes the basics of the environment is <a href=\"http://www.diveintopython.net/toc/index.html\" rel=\"nofollow noreferrer\">diveintopython.net</a> and  <a href=\"http://docs.python.org/tut/\" rel=\"nofollow noreferrer\">the \"official\" tutorial</a>.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.96,
													"negative": 0.03
												},
												"text": "<p>Perhaps for future projects I'll use a parsing library, but that's kind of aside from the question at hand.",
												"offset": 0,
												"length": 110
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.96,
													"neutral": 0.04,
													"negative": 0
												},
												"text": "This is my current solution.",
												"offset": 111,
												"length": 28
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.83,
													"negative": 0.16
												},
												"text": "<code>rstrpos</code> is strpos, but from the reverse direction.",
												"offset": 140,
												"length": 63
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.04,
													"negative": 0.96
												},
												"text": "Example use:</p>\n\n<pre><code>for($i=0; $i&lt;count($lines); $i++)\n{\n    $line = handle_mulitline_tags(&amp;$i, $line, $lines);\n}\n</code></pre>\n\n<p>And here's that implementation:</p>\n\n<pre><code>function rstrpos($string, $charToFind, $relativePos)\n{\n    $searchPos = $relativePos;\n    $searchChar = '';\n\n    while (($searchChar != $charToFind)&amp;&amp;($searchPos&gt;-1))\n    {\n        $newPos = $searchPos-1;\n        $searchChar = substr($string,$newPos,strlen($charToFind));\n        $searchPos = $newPos;\n    }\n\n    if (!empty($searchChar))\n    {\n        return $searchPos;\n        return TRUE;\n    }\n    else\n    {\n        return FALSE;\n    }\n}\n\nfunction handle_multiline_tags(&amp;$i, $line, $lines)\n{\n    //if a tag is opened but not closed before a line break,\n\n    $open = rstrpos($line, '&lt;', strlen($line));\n    $close = rstrpos($line, '&gt;', strlen($line));\n    if(($open &gt; $close)&amp;&amp;($open &gt; -1)&amp;&amp;($close &gt; -1))\n    {\n        $i++;\n        return trim($line).trim(handle_multiline_tags(&amp;$i, $lines[$i], $lines));\n    }\n    else\n    {\n        return trim($line);\n    }\n}\n</code></pre>\n\n<p>This could probably be optimized in some way, but for my purposes, it's sufficient.</p>",
												"offset": 204,
												"length": 1218
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34614",
										"Body": "<p>Perhaps for future projects I'll use a parsing library, but that's kind of aside from the question at hand. This is my current solution. <code>rstrpos</code> is strpos, but from the reverse direction. Example use:</p>\n\n<pre><code>for($i=0; $i&lt;count($lines); $i++)\n{\n    $line = handle_mulitline_tags(&amp;$i, $line, $lines);\n}\n</code></pre>\n\n<p>And here's that implementation:</p>\n\n<pre><code>function rstrpos($string, $charToFind, $relativePos)\n{\n    $searchPos = $relativePos;\n    $searchChar = '';\n\n    while (($searchChar != $charToFind)&amp;&amp;($searchPos&gt;-1))\n    {\n        $newPos = $searchPos-1;\n        $searchChar = substr($string,$newPos,strlen($charToFind));\n        $searchPos = $newPos;\n    }\n\n    if (!empty($searchChar))\n    {\n        return $searchPos;\n        return TRUE;\n    }\n    else\n    {\n        return FALSE;\n    }\n}\n\nfunction handle_multiline_tags(&amp;$i, $line, $lines)\n{\n    //if a tag is opened but not closed before a line break,\n\n    $open = rstrpos($line, '&lt;', strlen($line));\n    $close = rstrpos($line, '&gt;', strlen($line));\n    if(($open &gt; $close)&amp;&amp;($open &gt; -1)&amp;&amp;($close &gt; -1))\n    {\n        $i++;\n        return trim($line).trim(handle_multiline_tags(&amp;$i, $lines[$i], $lines));\n    }\n    else\n    {\n        return trim($line);\n    }\n}\n</code></pre>\n\n<p>This could probably be optimized in some way, but for my purposes, it's sufficient.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "<p>Here's the jQuery version:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://jqueryjs.googlecode.com/files/jquery-1.2.6.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(function () {\n    $(\"#switches li\").mouseover(function () {\n        var $this = $(this);\n        $(\"#slides div\").hide();\n        $(\"#slide\" + $this.attr(\"id\").replace(/switch/, \"\")).show();\n        $(\"#switches li\").css(\"font-weight\", \"normal\");\n        $this.css(\"font-weight\", \"bold\");\n    });\n});\n&lt;/script&gt;\n\n&lt;ul id=\"switches\"&gt;\n  &lt;li id=\"switch1\" style=\"font-weight:bold;\"&gt;First slide&lt;/li&gt;\n  &lt;li id=\"switch2\"&gt;Second slide&lt;/li&gt;\n  &lt;li id=\"switch3\"&gt;Third slide&lt;/li&gt;\n  &lt;li id=\"switch4\"&gt;Fourth slide&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=\"slides\"&gt;\n  &lt;div id=\"slide1\"&gt;Well well.&lt;/div&gt;\n  &lt;div id=\"slide2\" style=\"display:none;\"&gt;Oh no!&lt;/div&gt;\n  &lt;div id=\"slide3\" style=\"display:none;\"&gt;You again?&lt;/div&gt;\n  &lt;div id=\"slide4\" style=\"display:none;\"&gt;I'm gone!&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>",
												"offset": 0,
												"length": 1080
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34617",
										"Body": "<p>Here's the jQuery version:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://jqueryjs.googlecode.com/files/jquery-1.2.6.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(function () {\n    $(\"#switches li\").mouseover(function () {\n        var $this = $(this);\n        $(\"#slides div\").hide();\n        $(\"#slide\" + $this.attr(\"id\").replace(/switch/, \"\")).show();\n        $(\"#switches li\").css(\"font-weight\", \"normal\");\n        $this.css(\"font-weight\", \"bold\");\n    });\n});\n&lt;/script&gt;\n\n&lt;ul id=\"switches\"&gt;\n  &lt;li id=\"switch1\" style=\"font-weight:bold;\"&gt;First slide&lt;/li&gt;\n  &lt;li id=\"switch2\"&gt;Second slide&lt;/li&gt;\n  &lt;li id=\"switch3\"&gt;Third slide&lt;/li&gt;\n  &lt;li id=\"switch4\"&gt;Fourth slide&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=\"slides\"&gt;\n  &lt;div id=\"slide1\"&gt;Well well.&lt;/div&gt;\n  &lt;div id=\"slide2\" style=\"display:none;\"&gt;Oh no!&lt;/div&gt;\n  &lt;div id=\"slide3\" style=\"display:none;\"&gt;You again?&lt;/div&gt;\n  &lt;div id=\"slide4\" style=\"display:none;\"&gt;I'm gone!&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.97,
													"negative": 0.02
												},
												"text": "<p>A sort-of-canonical definition is \"<em>when two threads access the same location in memory at the same time, and at least one of the accesses is a write</em>.\"",
												"offset": 0,
												"length": 162
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.43,
													"neutral": 0.05,
													"negative": 0.52
												},
												"text": "In the situation the \"reader\" thread may get the old value or the new value, depending on which thread \"wins the race.\"",
												"offset": 163,
												"length": 119
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.03,
													"negative": 0.97
												},
												"text": "This is not always a bug&mdash;in fact, some really hairy low-level algorithms do this on purpose&mdash;but it should generally be avoided.",
												"offset": 283,
												"length": 139
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.1,
													"neutral": 0,
													"negative": 0.9
												},
												"text": "@Steve Gury give's a good example of when it might be a problem.</p>",
												"offset": 423,
												"length": 68
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34621",
										"Body": "<p>A sort-of-canonical definition is \"<em>when two threads access the same location in memory at the same time, and at least one of the accesses is a write</em>.\" In the situation the \"reader\" thread may get the old value or the new value, depending on which thread \"wins the race.\" This is not always a bug&mdash;in fact, some really hairy low-level algorithms do this on purpose&mdash;but it should generally be avoided. @Steve Gury give's a good example of when it might be a problem.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.99,
													"neutral": 0.01,
													"negative": 0
												},
												"text": "<p>Why would you do an automatic HTML post rather than a simple redirect?</p>\n\n<p>Is this so developers can automatically generate a login form that posts directory to the remote server when the OpenID is known?</p>\n\n<p>eg.</p>\n\n<ol>\n<li>User is not logged in and visits your login page.</li>\n<li>You detect the user's openID from a cookie.</li>\n<li>Form is generated that directly posts to remote OpenID server.</li>\n<li>Remote server redirects user back to website.</li>\n<li>Website logs in the user.</li>\n</ol>\n\n<p>If this is the case I can see the benefit.",
												"offset": 0,
												"length": 560
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.94,
													"neutral": 0.03,
													"negative": 0.03
												},
												"text": "However this assumes that you keep the user's openID in a cookie when they log out.</p>\n\n<p>I can find very little information on how this spec should be best implemented.</p>\n\n<p>See HTML FORM Redirection in the official specs:</p>\n\n<p><a href=\"http://openid.net/specs/openid-authentication-2_0.html#indirect_comm\" rel=\"noreferrer\">http://openid.net/specs/openid-authentication-2_0.html#indirect_comm</a></p>\n\n<p>I found this out from looking at the <a href=\"http://openidenabled.com/php-openid/\" rel=\"noreferrer\">PHP OpenID Library</a> (version 2.1.1).</p>\n\n<pre><code>// Redirect the user to the OpenID server for authentication.",
												"offset": 561,
												"length": 632
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "// Store the token for this authentication so we can verify the\n// response.",
												"offset": 1194,
												"length": 76
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "// For OpenID 1, send a redirect.",
												"offset": 1272,
												"length": 33
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "For OpenID 2, use a Javascript\n// form to send a POST request to the server.",
												"offset": 1307,
												"length": 76
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "if ($auth_request-&gt;shouldSendRedirect()) {\n    $redirect_url = $auth_request-&gt;redirectURL(getTrustRoot(),\n                                               getReturnTo());\n\n    // If the redirect URL can't be built, display an error\n    // message.",
												"offset": 1384,
												"length": 251
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "if (Auth_OpenID::isFailure($redirect_url)) {\n        displayError(\"Could not redirect to server: \" .",
												"offset": 1640,
												"length": 100
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "$redirect_url-&gt;message);\n    } else {\n        // Send redirect.",
												"offset": 1741,
												"length": 66
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.95,
													"negative": 0.03
												},
												"text": "header(\"Location: \".$redirect_url);\n    }\n} else {\n    // Generate form markup and render it.",
												"offset": 1816,
												"length": 93
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.17,
													"negative": 0.82
												},
												"text": "$form_id = 'openid_message';\n    $form_html = $auth_request-&gt;htmlMarkup(getTrustRoot(), getReturnTo(),\n                                           false, array('id' =&gt; $form_id));\n\n    // Display an error if the form markup couldn't be generated;\n    // otherwise, render the HTML.",
												"offset": 1914,
												"length": 286
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0,
													"negative": 1
												},
												"text": "if (Auth_OpenID::isFailure($form_html)) {\n        displayError(\"Could not redirect to server: \" .",
												"offset": 2205,
												"length": 97
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 1,
													"negative": 0
												},
												"text": "$form_html-&gt;message);\n    } else {\n        print $form_html;\n    }\n}\n</code></pre>",
												"offset": 2303,
												"length": 85
											}
										],
										"sentiment": "mixed",
										"warnings": [],
										"id": "34623",
										"Body": "<p>Why would you do an automatic HTML post rather than a simple redirect?</p>\n\n<p>Is this so developers can automatically generate a login form that posts directory to the remote server when the OpenID is known?</p>\n\n<p>eg.</p>\n\n<ol>\n<li>User is not logged in and visits your login page.</li>\n<li>You detect the user's openID from a cookie.</li>\n<li>Form is generated that directly posts to remote OpenID server.</li>\n<li>Remote server redirects user back to website.</li>\n<li>Website logs in the user.</li>\n</ol>\n\n<p>If this is the case I can see the benefit. However this assumes that you keep the user's openID in a cookie when they log out.</p>\n\n<p>I can find very little information on how this spec should be best implemented.</p>\n\n<p>See HTML FORM Redirection in the official specs:</p>\n\n<p><a href=\"http://openid.net/specs/openid-authentication-2_0.html#indirect_comm\" rel=\"noreferrer\">http://openid.net/specs/openid-authentication-2_0.html#indirect_comm</a></p>\n\n<p>I found this out from looking at the <a href=\"http://openidenabled.com/php-openid/\" rel=\"noreferrer\">PHP OpenID Library</a> (version 2.1.1).</p>\n\n<pre><code>// Redirect the user to the OpenID server for authentication.\n// Store the token for this authentication so we can verify the\n// response.\n\n// For OpenID 1, send a redirect.  For OpenID 2, use a Javascript\n// form to send a POST request to the server.\nif ($auth_request-&gt;shouldSendRedirect()) {\n    $redirect_url = $auth_request-&gt;redirectURL(getTrustRoot(),\n                                               getReturnTo());\n\n    // If the redirect URL can't be built, display an error\n    // message.\n    if (Auth_OpenID::isFailure($redirect_url)) {\n        displayError(\"Could not redirect to server: \" . $redirect_url-&gt;message);\n    } else {\n        // Send redirect.\n        header(\"Location: \".$redirect_url);\n    }\n} else {\n    // Generate form markup and render it.\n    $form_id = 'openid_message';\n    $form_html = $auth_request-&gt;htmlMarkup(getTrustRoot(), getReturnTo(),\n                                           false, array('id' =&gt; $form_id));\n\n    // Display an error if the form markup couldn't be generated;\n    // otherwise, render the HTML.\n    if (Auth_OpenID::isFailure($form_html)) {\n        displayError(\"Could not redirect to server: \" . $form_html-&gt;message);\n    } else {\n        print $form_html;\n    }\n}\n</code></pre>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>jQuery is probably one of the lightest popular libraries out there.</p>",
												"offset": 0,
												"length": 74
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34625",
										"Body": "<p>jQuery is probably one of the lightest popular libraries out there.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.96,
													"negative": 0.03
												},
												"text": "<p>You might consider using two columns, one \"string\" and one \"numeric\" (whatever variants of those are appropriate) with the \"string\" column NOT NULL and the \"numeric\" column allowing NULL values.",
												"offset": 0,
												"length": 197
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.98,
													"negative": 0.02
												},
												"text": "When inserting a value, always populate the \"string\" column indpendent of the type, however if the value is numeric, ALSO store it in the \"numeric\" column.",
												"offset": 198,
												"length": 155
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.06,
													"neutral": 0.93,
													"negative": 0.01
												},
												"text": "Now you have a built in indicator as to the type (if the \"numeric\" column is populated it is numeric, if not it is a string), can always just pull the value for display from the \"string\" column, and can use the \"numeric\" value in calculations or for proper numeric sorting / comparison as needed.",
												"offset": 354,
												"length": 296
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.08,
													"neutral": 0.9,
													"negative": 0.02
												},
												"text": "You could always add a third column indicating the value type, but this approach eliminates the need for that.",
												"offset": 651,
												"length": 110
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "Note that you might consider maintaining the numeric and string values using a set of INSERT and UPDATE triggers.</p>",
												"offset": 762,
												"length": 117
											}
										],
										"sentiment": "neutral",
										"warnings": [],
										"id": "34626",
										"Body": "<p>You might consider using two columns, one \"string\" and one \"numeric\" (whatever variants of those are appropriate) with the \"string\" column NOT NULL and the \"numeric\" column allowing NULL values. When inserting a value, always populate the \"string\" column indpendent of the type, however if the value is numeric, ALSO store it in the \"numeric\" column. Now you have a built in indicator as to the type (if the \"numeric\" column is populated it is numeric, if not it is a string), can always just pull the value for display from the \"string\" column, and can use the \"numeric\" value in calculations or for proper numeric sorting / comparison as needed. You could always add a third column indicating the value type, but this approach eliminates the need for that. Note that you might consider maintaining the numeric and string values using a set of INSERT and UPDATE triggers.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 0.95,
													"neutral": 0.05,
													"negative": 0
												},
												"text": "<p><a href=\"http://diveintopython.net/\" rel=\"nofollow noreferrer\">Dive Into Python</a> is an excellent book geared toward programmers wanting to pick up Python.",
												"offset": 0,
												"length": 160
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "The best part is that it's freely available online.",
												"offset": 162,
												"length": 51
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.18,
													"neutral": 0.68,
													"negative": 0.14
												},
												"text": "I started learning a little Python a few months ago and I've worked through about half of the book.",
												"offset": 215,
												"length": 99
											},
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "It's a very comprehensive tool that's good for learning the language and also for a reference down the road.</p>\n\n<p>Edit: Kamens is a faster typer than I am.</p>",
												"offset": 316,
												"length": 162
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34627",
										"Body": "<p><a href=\"http://diveintopython.net/\" rel=\"nofollow noreferrer\">Dive Into Python</a> is an excellent book geared toward programmers wanting to pick up Python.  The best part is that it's freely available online.  I started learning a little Python a few months ago and I've worked through about half of the book.  It's a very comprehensive tool that's good for learning the language and also for a reference down the road.</p>\n\n<p>Edit: Kamens is a faster typer than I am.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0,
													"negative": 0.97
												},
												"text": "<p>Have you seen this:</p>\n\n<p><a href=\"http://www.itefix.no/i2/taxonomy/term/39\" rel=\"nofollow noreferrer\">http://www.itefix.no/i2/taxonomy/term/39</a></p>\n\n<p>I have used cwrsync without any problem (and with the much of the usual cygwin misery), but I haven't had any need for unicode filenames, so I've not seen that problem.</p>\n\n<p>I don't really know why there isn't a native Win32 port, but I did look at the source a while back because I implemented a similar delta-copy system in C#.",
												"offset": 0,
												"length": 493
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0,
													"negative": 0.99
												},
												"text": "As one would expect from the world of brilliant *nix hackers, the source is largely single-character variable names and a total absence of comments, which isn't terrible helpful and might be rather off-putting to would-be porters.</p>",
												"offset": 496,
												"length": 234
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34629",
										"Body": "<p>Have you seen this:</p>\n\n<p><a href=\"http://www.itefix.no/i2/taxonomy/term/39\" rel=\"nofollow noreferrer\">http://www.itefix.no/i2/taxonomy/term/39</a></p>\n\n<p>I have used cwrsync without any problem (and with the much of the usual cygwin misery), but I haven't had any need for unicode filenames, so I've not seen that problem.</p>\n\n<p>I don't really know why there isn't a native Win32 port, but I did look at the source a while back because I implemented a similar delta-copy system in C#.   As one would expect from the world of brilliant *nix hackers, the source is largely single-character variable names and a total absence of comments, which isn't terrible helpful and might be rather off-putting to would-be porters.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.99,
													"negative": 0.01
												},
												"text": "<p>I tend not to test private methods.",
												"offset": 0,
												"length": 38
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0,
													"neutral": 0.01,
													"negative": 0.99
												},
												"text": "There lies madness.",
												"offset": 40,
												"length": 19
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.22,
													"neutral": 0.74,
													"negative": 0.04
												},
												"text": "Personally, I believe you should only test your publicly exposed interfaces (and that includes protected and internal methods).",
												"offset": 61,
												"length": 127
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0.96,
													"negative": 0.02
												},
												"text": "</p>",
												"offset": 190,
												"length": 4
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34630",
										"Body": "<p>I tend not to test private methods.  There lies madness.  Personally, I believe you should only test your publicly exposed interfaces (and that includes protected and internal methods).  </p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "positive",
												"confidenceScores": {
													"positive": 1,
													"neutral": 0,
													"negative": 0
												},
												"text": "<p>Ahh, just found this <a href=\"http://www.codeplex.com/VSTSGuidance/Wiki/View.aspx?title=Use%20Team%20Foundation%20Power%20Tools%20to%20Rollback%20a%20Change&amp;referringTitle=Source%20Control%20Guidelines\" rel=\"nofollow noreferrer\">CodePlex Article on using TFPT.exe</a> (power tool) to rollback a changeset.</p>\n\n<p>Hope this helps you out.</p>",
												"offset": 0,
												"length": 349
											}
										],
										"sentiment": "positive",
										"warnings": [],
										"id": "34633",
										"Body": "<p>Ahh, just found this <a href=\"http://www.codeplex.com/VSTSGuidance/Wiki/View.aspx?title=Use%20Team%20Foundation%20Power%20Tools%20to%20Rollback%20a%20Change&amp;referringTitle=Source%20Control%20Guidelines\" rel=\"nofollow noreferrer\">CodePlex Article on using TFPT.exe</a> (power tool) to rollback a changeset.</p>\n\n<p>Hope this helps you out.</p>\n"
									},
									{
										"sentences": [
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.04,
													"neutral": 0,
													"negative": 0.96
												},
												"text": "<p>And what's funny (and frustrating!)",
												"offset": 0,
												"length": 38
											},
											{
												"sentiment": "neutral",
												"confidenceScores": {
													"positive": 0.01,
													"neutral": 0.99,
													"negative": 0
												},
												"text": "is that the Microsoft <strong>OS X</strong> apps (e.g.",
												"offset": 39,
												"length": 54
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.03,
													"neutral": 0,
													"negative": 0.97
												},
												"text": "Entourage) use the <strong>Windows</strong> standards.</p>\n\n<p>I develop on WinXP during the day but have an iMac at home, so it's confusing enough trying to switch modes between work and home.",
												"offset": 94,
												"length": 193
											},
											{
												"sentiment": "negative",
												"confidenceScores": {
													"positive": 0.02,
													"neutral": 0,
													"negative": 0.98
												},
												"text": "But then I have to remember if I'm writing an e-mail in Entourage, I need to revert back to Windows mode.</p>\n\n<p>I can't think of any good reason why MS wouldn't follow the OS X keyboard standards...</p>",
												"offset": 289,
												"length": 204
											}
										],
										"sentiment": "negative",
										"warnings": [],
										"id": "34634",
										"Body": "<p>And what's funny (and frustrating!) is that the Microsoft <strong>OS X</strong> apps (e.g. Entourage) use the <strong>Windows</strong> standards.</p>\n\n<p>I develop on WinXP during the day but have an iMac at home, so it's confusing enough trying to switch modes between work and home.  But then I have to remember if I'm writing an e-mail in Entourage, I need to revert back to Windows mode.</p>\n\n<p>I can't think of any good reason why MS wouldn't follow the OS X keyboard standards...</p>\n"
									}
								],
								"schema": {
									"Body": "string",
									"id": "string",
									"sentiment": "string",
									"statistics": "StructType(StructField(charactersCount,IntegerType,false), StructField(transactionsCount,IntegerType,false))",
									"documentScores": "StructType(StructField(positive,DoubleType,false), StructField(neutral,DoubleType,false), StructField(negative,DoubleType,false))",
									"sentences": "ArrayType(StructType(StructField(text,StringType,true), StructField(sentiment,StringType,true), StructField(confidenceScores,StructType(StructField(positive,DoubleType,false), StructField(neutral,DoubleType,false), StructField(negative,DoubleType,false)),true), StructField(offset,IntegerType,false), StructField(length,IntegerType,false)),true)",
									"warnings": "ArrayType(StructType(StructField(code,StringType,true), StructField(message,StringType,true), StructField(targetRef,StringType,true)),true)",
									"error-message": "string",
									"error": "StructType(StructField(response,StringType,true), StructField(status,StructType(StructField(protocolVersion,StructType(StructField(protocol,StringType,true), StructField(major,IntegerType,false), StructField(minor,IntegerType,false)),true), StructField(statusCode,IntegerType,false), StructField(reasonPhrase,StringType,true)),true))"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"Body"
									],
									"seriesFieldKeys": [
										"Body"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from mmlspark.cognitive import *\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import explode\r\n",
					"\r\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
					"service_key = mssparkutils.credentials.getSecret(\"akv-app\", \"cognitive-key\", \"akv_app\")\r\n",
					"\r\n",
					"# Load the data into a Spark DataFrame\r\n",
					"df = spark.sql(\"SELECT * FROM default.posts\")\r\n",
					"\r\n",
					"sentiment = (TextSentiment()\r\n",
					"    .setLocation(\"northeurope\")\r\n",
					"    .setSubscriptionKey(service_key)\r\n",
					"    .setOutputCol(\"output\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setLanguage(\"en\")\r\n",
					"    .setTextCol(\"Body\"))\r\n",
					"\r\n",
					"results = sentiment.transform(df)\r\n",
					"\r\n",
					"final = results\\\r\n",
					"    .select(\"Body\",\"id\", explode(\"output\").alias(\"exploded\"), \"error\")\\\r\n",
					"    .select(\"Body\",\"id\", \"exploded.*\", \"error\")\\\r\n",
					"    .limit(100)\r\n",
					"# Show the results\r\n",
					"display(final)\r\n",
					"\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS PostsWithSentiments\"); \r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"final.write.saveAsTable(\"PostsWithSentiments\");"
				],
				"execution_count": 26
			}
		]
	}
}