{
	"name": "Sentiment Analysis",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.cognitive import *\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import explode\r\n",
					"\r\n",
					"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
					"service_key = mssparkutils.credentials.getSecret(\"akv-app\", \"cognitive-key\", \"akv_app\")\r\n",
					"\r\n",
					"# Load the data into a Spark DataFrame\r\n",
					"df = spark.sql(\"SELECT * FROM default.posts\")\r\n",
					"\r\n",
					"sentiment = (TextSentiment()\r\n",
					"    .setLocation(\"northeurope\")\r\n",
					"    .setSubscriptionKey(service_key)\r\n",
					"    .setOutputCol(\"output\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setLanguage(\"en\")\r\n",
					"    .setTextCol(\"Body\"))\r\n",
					"\r\n",
					"results = sentiment.transform(df)\r\n",
					"\r\n",
					"# Show the results\r\n",
					"display(results\\\r\n",
					"    .select(\"Body\", explode(\"output\").alias(\"exploded\"), \"error\")\\\r\n",
					"    .select(\"Body\", \"exploded.*\", \"error\")\\\r\n",
					"    .limit(10))\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS PostsWithSentiments\"); \r\n",
					"results.write.saveAsTable(\"PostsWithSentiments\");"
				],
				"execution_count": null
			}
		]
	}
}