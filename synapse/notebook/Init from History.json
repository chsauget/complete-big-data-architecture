{
	"name": "Init from History",
	"properties": {
		"folder": {
			"name": "StackOverflow"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import year, month, dayofmonth, hour, minute, second\r\n",
					"lakepath = \"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/\"\r\n",
					"goldpath = \"gold/\"\r\n",
					"historypath = \"raw/History/Parquet/\""
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Tags**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Tags'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df.write.format(\"delta\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Badges**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"tableName = 'Badges'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"Date\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"Date\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"Date\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Comments**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Comments'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PostHistory**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'PostHistory'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PostLinks**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'PostLinks'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Posts**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Posts'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Users**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Users'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Votes**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Votes'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
					"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").save(lakepath+goldpath+tableName)"
				],
				"execution_count": null
			}
		]
	}
}