{
	"name": "Init from History",
	"properties": {
		"folder": {
			"name": "StackOverflow"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 7,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"lakepath = \"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/\"\r\n",
					"goldpath = \"gold/\"\r\n",
					"historypath = \"raw/History/Parquet/\""
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Tags**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Tags'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df.write.format(\"delta\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Badges**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE SparkDwh.Votes\")"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"tableName = 'Badges'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"Class\", df[\"Class\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"DateTime\", df[\"Date\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"Date\"],\"yyyy-MM-dd\"))\r\n",
					"                \r\n",
					"df_cleaned = df_withDate.drop(\"Date\")\r\n",
					"\r\n",
					"df_cleaned.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Comments**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Comments'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"Score\", df[\"Score\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"                \r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 79
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PostHistory**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'PostHistory'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostHistoryTypeId\", df[\"PostHistoryTypeId\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 81
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PostLinks**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'PostLinks'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"RelatedPostId\", df[\"RelatedPostId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"LinkTypeId\", df[\"LinkTypeId\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 83
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Posts**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import sparknlp\r\n",
					"from sparknlp.base import *\r\n",
					"from sparknlp.annotator import *\r\n",
					"from pyspark.ml import Pipeline\r\n",
					"\r\n",
					"tableName = 'Posts'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"AcceptedAnswerId\", df[\"AcceptedAnswerId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostTypeId\", df[\"PostTypeId\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"Score\", df[\"Score\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"ViewCount\", df[\"ViewCount\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"OwnerUserId\", df[\"OwnerUserId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"LastEditorUserId\", df[\"LastEditorUserId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"LastEditDate\", df[\"LastEditDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"LastActivityDate\", df[\"LastActivityDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"AnswerCount\", df[\"AnswerCount\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"CommentCount\", df[\"CommentCount\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"FavoriteCount\", df[\"FavoriteCount\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"CommunityOwnedDate\", df[\"CommunityOwnedDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"#Cleaning step for body\r\n",
					"documentAssembler = DocumentAssembler() \\\r\n",
					"    .setInputCol('Body') \\\r\n",
					"    .setOutputCol('BodyClean')\r\n",
					"\r\n",
					"cleanUpPatterns = [\"<[^>]*>\"]\r\n",
					"\r\n",
					"documentNormalizer = DocumentNormalizer() \\\r\n",
					"    .setInputCols(\"BodyClean\") \\\r\n",
					"    .setOutputCol(\"normalizedBody\") \\\r\n",
					"    .setAction(\"clean\") \\\r\n",
					"    .setPatterns(cleanUpPatterns) \\\r\n",
					"    .setReplacement(\" \") \\\r\n",
					"    .setPolicy(\"pretty_all\") \\\r\n",
					"    .setLowercase(True)\r\n",
					"\r\n",
					"\r\n",
					"docPatternRemoverPipeline = \\\r\n",
					"  Pipeline() \\\r\n",
					"    .setStages([\r\n",
					"        documentAssembler,\r\n",
					"        documentNormalizer\r\n",
					"    ])\r\n",
					"\r\n",
					"df_cleaned = docPatternRemoverPipeline.fit(df_withDate).transform(df_withDate)\r\n",
					"\r\n",
					"df_cleaned.drop(\"BodyClean\")\r\n",
					"\r\n",
					"df_cleaned.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Users**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Users'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"Reputation\", df[\"Reputation\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"LastAccessDate\", df[\"LastAccessDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"Views\", df[\"Views\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"UpVotes\", df[\"UpVotes\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"DownVotes\", df[\"DownVotes\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 87
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Votes**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableName = 'Votes'\r\n",
					"\r\n",
					"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
					"\r\n",
					"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
					"                .withColumn(\"VoteTypeId\", df[\"VoteTypeId\"].cast(IntegerType()))\\\r\n",
					"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
					"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"df_withDate.drop(\"CreationDate\")\r\n",
					"\r\n",
					"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
					"\r\n",
					"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
				],
				"execution_count": 89
			}
		]
	}
}