{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-app"
		},
		"AzureMLService1_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureMLService1'"
		},
		"CosmosDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb'"
		},
		"SQLOD_SynapseAPP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLOD_SynapseAPP'"
		},
		"synapse-app-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-app-WorkspaceDefaultSqlServer'"
		},
		"Azure Function API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://net-core-for-big-data-premium.azurewebsites.net"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "c24ef419-76bf-4265-bb0d-e3e3f3086be2"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "complete-big-data-architecture"
		},
		"AzureMLService1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "d5340f3f-e135-4b2c-9a28-a142eb98f57e"
		},
		"AzureMLService1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "01cad88a-b9c8-4c54-ad8d-c6920c250e4b"
		},
		"REST_StackOverflow_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://net-core-for-big-data-premium.azurewebsites.net/api/"
		},
		"akv_app_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akv-app.vault.azure.net/"
		},
		"nyc_tlc_fhv_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_fhv'"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"synapse-app-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapselakeapp.dfs.core.windows.net"
		},
		"15Min_properties_pipeline_parameters_BaseUrl": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.3/{object}?site=stackoverflow&key={key}&access_token={access_token}&filter={filter}&pagesize=100&page=1&fromdate={date}{additionalOption}"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Master - Daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EP - Badges",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - Daily - Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"UrlQuery": {
									"value": "@pipeline().parameters.BaseUrl",
									"type": "Expression"
								},
								"Filter": "!3tlXYBI.hSlGyD3oc",
								"MaxDateQuery": "SELECT [LastDate] = CAST(DATEDIFF(SECOND, '1970-01-01',MAX([DateTime])) AS VARCHAR)\n  FROM [dwh].[Badges]",
								"Object": "badges/recipients",
								"BackoffSeconds": "5000"
							}
						}
					},
					{
						"name": "EP - Posts",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - Daily - Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"UrlQuery": {
									"value": "@pipeline().parameters.BaseUrl",
									"type": "Expression"
								},
								"Filter": "!szxl1GZm4qbFlUGgI0mO90EuDDF)HfQ",
								"MaxDateQuery": "  SELECT [LastDate] = CAST(DATEDIFF(SECOND, '1970-01-01',MAX([CreationDateTime])) AS VARCHAR)\n  FROM [dwh].[Posts]",
								"Object": "posts",
								"BackoffSeconds": "10500",
								"AdditionalOption": "&order=asc&sort=creation"
							}
						}
					},
					{
						"name": "EP - Comments",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - Daily - Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"UrlQuery": {
									"value": "@pipeline().parameters.BaseUrl",
									"type": "Expression"
								},
								"Filter": "!Fc6b9.M25voXPC5GTjBjeyMd)l",
								"MaxDateQuery": "SELECT [LastDate] = CAST(DATEDIFF(SECOND, '1970-01-01',MAX([CreationDateTime])) AS VARCHAR)\n  FROM [dwh].[Comments]",
								"Object": "comments",
								"BackoffSeconds": "5000"
							}
						}
					},
					{
						"name": "EP - Tags",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - Daily - Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"UrlQuery": {
									"value": "@pipeline().parameters.BaseUrl",
									"type": "Expression"
								},
								"Filter": "!*MO(WDa3IX-qd)Aj",
								"MaxDateQuery": "SELECT [LastDate] = CAST(0 AS VARCHAR(20))",
								"Object": "tags",
								"BackoffSeconds": "1000"
							}
						}
					},
					{
						"name": "EP - Users",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - Daily - Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"UrlQuery": {
									"value": "@pipeline().parameters.BaseUrl",
									"type": "Expression"
								},
								"Filter": "!4-M_0EdrCcvZ7suG-",
								"MaxDateQuery": "SELECT [LastDate] = CAST(DATEDIFF(SECOND, '1970-01-01',MAX(LastAccessDate)) AS VARCHAR)\n  FROM [dwh].[Users]",
								"Object": "users",
								"BackoffSeconds": "10000"
							}
						}
					},
					{
						"name": "NTBK - Merge Posts",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - Posts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Daily - Posts",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "NTBK - Merge Badges",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - Badges",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Daily - Posts",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "NTBK - Merge Comments",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - Comments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Daily - Posts",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "NTBK - Merge Tags",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - Tags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Daily - Posts",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "NTBK - Merge Users",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Daily - Posts",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BaseUrl": {
						"type": "string",
						"defaultValue": "https://api.stackexchange.com/2.3/{object}?site=stackoverflow&key={key}&access_token={access_token}&filter={filter}&pagesize=100&page=1&fromdate={date}{additionalOption}"
					}
				},
				"folder": {
					"name": "Daily"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/StackOverflow - Daily - Load')]",
				"[concat(variables('workspaceId'), '/notebooks/Daily - Posts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Master - Load Historical 7z')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EP - 7Z to Parquet",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "StackOverflow - 7zip2Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Container": "lake",
								"Folder": "StackOverflow/raw/History/7z/",
								"Account": "synapselakeapp"
							}
						}
					},
					{
						"name": "NTBK - Reload Tables",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "EP - 7Z to Parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Init from History",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Historical"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/StackOverflow - 7zip2Parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/Init from History')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StackOverflow - 7zip2Parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach - 7zip Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter - Specific File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter - Specific File').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy - UnZip Files 2 Parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 120,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{concat('/api/SevenZip/'\n,uriComponent(pipeline().parameters.Account)\n,'/'\n,uriComponent(pipeline().parameters.Container)\n,'/'\n,uriComponent(uriComponent(pipeline().parameters.Folder))\n,'/'\n,uriComponent(item().name)\n)}"
										},
										{
											"name": "Destination",
											"value": "lake/StackOverflow/parquet/@{uriComponent(replace(item().name,'.7z','.parquet'))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"requestTimeout": "23:00:00"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SevenZipAPI",
											"type": "DatasetReference",
											"parameters": {
												"Account": {
													"value": "@uriComponent(pipeline().parameters.Account)",
													"type": "Expression"
												},
												"Container": {
													"value": "@uriComponent(pipeline().parameters.Container)",
													"type": "Expression"
												},
												"Folder": {
													"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@uriComponent(item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetXMLStorage",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@uriComponent(replace(item().name,'.7z','.parquet'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata - List 7z",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 3,
							"retryIntervalInSeconds": 90,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZipXml",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.Folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter - Specific File",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata - List 7z",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata - List 7z').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(empty(pipeline().parameters.FileName)\n,equals(item().name,pipeline().parameters.FileName)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "lake"
					},
					"Folder": {
						"type": "string",
						"defaultValue": "StackOverflow/raw/History/7z/"
					},
					"Account": {
						"type": "string",
						"defaultValue": "synapselakeapp"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Historical"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ZipXml')]",
				"[concat(variables('workspaceId'), '/datasets/SevenZipAPI')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetXMLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StackOverflow - Daily - Load')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy - StackOverflow",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web - KeyVault Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LKP - Last Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "12:00:00",
								"requestInterval": {
									"value": "@{pipeline().parameters.BackoffSeconds}",
									"type": "Expression"
								},
								"requestMethod": "GET",
								"paginationRules": {
									"QueryParameters['urlquery']": "$.nextLink"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestStackOverflow",
								"type": "DatasetReference",
								"parameters": {
									"UrlQuery": {
										"value": "@replace(\n\treplace(\n\t\treplace(\n\t\t\treplace(\n\t\t\t\treplace(\n\t\t\t\t\treplace(\n\t\t\t\t\t\tpipeline().parameters.UrlQuery\n\t\t\t\t\t\t,'{filter}'\n\t\t\t\t\t\t,pipeline().parameters.Filter\n\t\t\t\t\t)\n\t\t\t\t,'{key}'\n\t\t\t\t,json(activity('Web - KeyVault Secret').output.value).key\n\t\t\t\t)\n\t\t\t,'{access_token}'\n\t\t\t,json(activity('Web - KeyVault Secret').output.value).access_token\n\t\t\t)\n\t\t,'{date}'\n\t\t,activity('LKP - Last Date').output.firstRow.LastDate\n\t\t)\n\t,'{object}'\n\t,pipeline().parameters.Object\n\t)\n,'{additionalOption}'\n,pipeline().parameters.AdditionalOption\n)",
										"type": "Expression"
									},
									"PageMax": {
										"value": "@pipeline().parameters.PageMax",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Http2JsonBinary",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@{pipeline().parameters.Object}/@{formatDateTime(utcnow(),'yyyyMMdd')}/@{formatDateTime(utcnow(),'hh-mm')}.json",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Web - KeyVault Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://akv-app.vault.azure.net/secrets/StackOverflow-api?api-version=7.0",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "LKP - Last Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.MaxDateQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLOD_StackOverflowDwh_Generic",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"UrlQuery": {
						"type": "string",
						"defaultValue": "https://api.stackexchange.com/2.3/posts?order=desc&sort=activity&site=stackoverflow&key={key}&access_token={access_token}&filter={filter}&pagesize=100&page=1&fromdate={date}{additionalOption}"
					},
					"Filter": {
						"type": "string",
						"defaultValue": "!szxl1GZm4qbFlUGgI0mO90EuDDF)HfQ"
					},
					"MaxDateQuery": {
						"type": "string",
						"defaultValue": "SELECT [LastPostDate] = CAST(DATEDIFF(SECOND, '1970-01-01',MAX([CreationDateTime])) AS VARCHAR)   FROM [dwh].[Posts]"
					},
					"Object": {
						"type": "string"
					},
					"BackoffSeconds": {
						"type": "string"
					},
					"PageMax": {
						"type": "string",
						"defaultValue": "100"
					},
					"AdditionalOption": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Daily"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestStackOverflow')]",
				"[concat(variables('workspaceId'), '/datasets/Http2JsonBinary')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/SQLOD_StackOverflowDwh_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StackOverflow - Init')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy - Tags",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@TagName']"
										},
										"sink": {
											"name": "TagName"
										}
									},
									{
										"source": {
											"path": "['@Count']"
										},
										"sink": {
											"name": "Count"
										}
									},
									{
										"source": {
											"path": "['@ExcerptPostId']"
										},
										"sink": {
											"name": "ExcerptPostId"
										}
									},
									{
										"source": {
											"path": "['@WikiPostId']"
										},
										"sink": {
											"name": "WikiPostId"
										}
									}
								],
								"collectionReference": "$['tags']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-Tags.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					},
					{
						"name": "Copy - Badges",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@UserId']"
										},
										"sink": {
											"name": "UserId"
										}
									},
									{
										"source": {
											"path": "['@Name']"
										},
										"sink": {
											"name": "Name"
										}
									},
									{
										"source": {
											"path": "['@Date']"
										},
										"sink": {
											"name": "Date"
										}
									},
									{
										"source": {
											"path": "['@Class']"
										},
										"sink": {
											"name": "Class"
										}
									},
									{
										"source": {
											"path": "['@TagBased']"
										},
										"sink": {
											"name": "TagBased"
										}
									}
								],
								"collectionReference": "$['badges']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-Badges.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					},
					{
						"name": "Copy - Comments",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@PostId']"
										},
										"sink": {
											"name": "PostId"
										}
									},
									{
										"source": {
											"path": "['@Score']"
										},
										"sink": {
											"name": "Score"
										}
									},
									{
										"source": {
											"path": "['@Text']"
										},
										"sink": {
											"name": "Text"
										}
									},
									{
										"source": {
											"path": "['@CreationDate']"
										},
										"sink": {
											"name": "CreationDate"
										}
									},
									{
										"source": {
											"path": "['@UserId']"
										},
										"sink": {
											"name": "UserId"
										}
									},
									{
										"source": {
											"path": "['@ContentLicense']"
										},
										"sink": {
											"name": "ContentLicense"
										}
									}
								],
								"collectionReference": "$['comments']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-Comments.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					},
					{
						"name": "Copy - PostLinks",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@CreationDate']"
										},
										"sink": {
											"name": "CreationDate"
										}
									},
									{
										"source": {
											"path": "['@PostId']"
										},
										"sink": {
											"name": "PostId"
										}
									},
									{
										"source": {
											"path": "['@RelatedPostId']"
										},
										"sink": {
											"name": "RelatedPostId"
										}
									},
									{
										"source": {
											"path": "['@LinkTypeId']"
										},
										"sink": {
											"name": "LinkTypeId"
										}
									}
								],
								"collectionReference": "$['postlinks']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-PostLinks.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					},
					{
						"name": "Copy - Users",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@Reputation']"
										},
										"sink": {
											"name": "Reputation"
										}
									},
									{
										"source": {
											"path": "['@CreationDate']"
										},
										"sink": {
											"name": "CreationDate"
										}
									},
									{
										"source": {
											"path": "['@DisplayName']"
										},
										"sink": {
											"name": "DisplayName"
										}
									},
									{
										"source": {
											"path": "['@LastAccessDate']"
										},
										"sink": {
											"name": "LastAccessDate"
										}
									},
									{
										"source": {
											"path": "['@AboutMe']"
										},
										"sink": {
											"name": "AboutMe"
										}
									},
									{
										"source": {
											"path": "['@Views']"
										},
										"sink": {
											"name": "Views"
										}
									},
									{
										"source": {
											"path": "['@UpVotes']"
										},
										"sink": {
											"name": "UpVotes"
										}
									},
									{
										"source": {
											"path": "['@DownVotes']"
										},
										"sink": {
											"name": "DownVotes"
										}
									}
								],
								"collectionReference": "$['users']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-Users.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					},
					{
						"name": "Copy - Votes",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 120,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['@Id']"
										},
										"sink": {
											"name": "Id"
										}
									},
									{
										"source": {
											"path": "['@PostId']"
										},
										"sink": {
											"name": "PostId"
										}
									},
									{
										"source": {
											"path": "['@VoteTypeId']"
										},
										"sink": {
											"name": "VoteTypeId"
										}
									},
									{
										"source": {
											"path": "['@CreationDate']"
										},
										"sink": {
											"name": "CreationDate"
										}
									}
								],
								"collectionReference": "$['votes']['row']"
							}
						},
						"inputs": [
							{
								"referenceName": "Un7zXml",
								"type": "DatasetReference",
								"parameters": {
									"Account": {
										"value": "@uriComponent(pipeline().parameters.Account)",
										"type": "Expression"
									},
									"Container": {
										"value": "@uriComponent(pipeline().parameters.Container)",
										"type": "Expression"
									},
									"Folder": {
										"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@uriComponent('stackoverflow.com-Votes.7z')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetXMLStorage",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "''"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "lake"
					},
					"Folder": {
						"type": "string",
						"defaultValue": "StackOverflow/raw"
					},
					"Account": {
						"type": "string",
						"defaultValue": "synapselakeapp"
					}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Un7zXml')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetXMLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StackOverflow - UnzipFiles')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach - 7zip Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata - List 7z",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata - List 7z').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy - UnZip Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 120,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{concat('/api/SevenZip/'\n,uriComponent(pipeline().parameters.Account)\n,'/'\n,uriComponent(pipeline().parameters.Container)\n,'/'\n,uriComponent(uriComponent(pipeline().parameters.Folder))\n,'/'\n,uriComponent(item().name)\n)}"
										},
										{
											"name": "Destination",
											"value": "lake/StackOverflow/xml/@{item().name}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Un7zBin",
											"type": "DatasetReference",
											"parameters": {
												"Account": {
													"value": "@uriComponent(pipeline().parameters.Account)",
													"type": "Expression"
												},
												"Container": {
													"value": "@uriComponent(pipeline().parameters.Container)",
													"type": "Expression"
												},
												"Folder": {
													"value": "@uriComponent(uriComponent(pipeline().parameters.Folder))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@uriComponent(item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "XMLBin",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@replace(item().name,'.7z','.xml')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata - List 7z",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 3,
							"retryIntervalInSeconds": 90,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZipXml",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.Folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "lake"
					},
					"Folder": {
						"type": "string",
						"defaultValue": "StackOverflow/raw"
					},
					"Account": {
						"type": "string",
						"defaultValue": "synapselakeapp"
					}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ZipXml')]",
				"[concat(variables('workspaceId'), '/datasets/Un7zBin')]",
				"[concat(variables('workspaceId'), '/datasets/XMLBin')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Http2JsonBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapse-app-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "StackOverflow/raw/Daily",
						"fileSystem": "lake"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapse-app-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetXMLStorage')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapse-app-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "StackOverflow/raw/History/Parquet/",
						"fileSystem": "lake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapse-app-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestStackOverflow')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "REST_StackOverflow",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"UrlQuery": {
						"type": "string"
					},
					"PageMax": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "StackOverflowWrapper?urlquery=@{encodeUriComponent(dataset().UrlQuery)}&pagemax=@{dataset().PageMax}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/REST_StackOverflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLOD_StackOverflowDwh_Generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLOD_SynapseAPP",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SQLOD_SynapseAPP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SevenZipAPI')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure Function API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Account": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/api/SevenZipV2/'\n,dataset().Account\n,'/'\n,dataset().Container\n,'/'\n,dataset().Folder\n,'/'\n,dataset().FileName\n)",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Azure Function API')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Un7zBin')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure Function API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Account": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/api/SevenZip/'\n,dataset().Account\n,'/'\n,dataset().Container\n,'/'\n,dataset().Folder\n,'/'\n,dataset().FileName\n)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Azure Function API')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Un7zXml')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Azure Function API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Account": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/api/SevenZip/'\n,dataset().Account\n,'/'\n,dataset().Container\n,'/'\n,dataset().Folder\n,'/'\n,dataset().FileName\n)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Azure Function API')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/XMLBin')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapse-app-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "stackoverflow.com-Badges.xml"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "StackOverflow/xml",
						"fileSystem": "lake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapse-app-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ZipXml')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapse-app-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapse-app-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Azure Function API')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Azure Function API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "ml-app",
					"servicePrincipalId": "[parameters('AzureMLService1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureMLService1_servicePrincipalKey')]"
					},
					"tenant": "[parameters('AzureMLService1_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/REST_StackOverflow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('REST_StackOverflow_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLOD_SynapseAPP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('SQLOD_SynapseAPP_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/akv_app')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('akv_app_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_fhv')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_fhv_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-app-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-app-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-app-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-app-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "synapse-app-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SrcBadgesXML"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "synapse-app-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SinkParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenXml2Table"
						}
					],
					"script": "source(output(\n\t\tbadges as (row as ({@Class} as short, {@Date} as string, {@Id} as integer, {@Name} as string, {@TagBased} as boolean, {@UserId} as short)[])\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'xml',\n\tfileSystem: 'lake',\n\tfolderPath: 'StackOverflow/xml',\n\tfileName: 'stackoverflow.com-Badges.xml',\n\tvalidationMode: 'none',\n\tnamespaces: true) ~> SrcBadgesXML\nSrcBadgesXML foldDown(unroll(badges.row, badges.row),\n\tmapColumn(\n\t\tClass = badges.row.{@Class},\n\t\tDate = badges.row.{@Date},\n\t\tId = badges.row.{@Id},\n\t\tName = badges.row.{@Name},\n\t\tTagBased = badges.row.{@TagBased},\n\t\tUserId = badges.row.{@UserId}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenXml2Table\nFlattenXml2Table sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'lake',\n\tfolderPath: 'StackOverflow/parquet/Badges',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapse-app-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Schema')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflowDwh"
				},
				"content": {
					"query": "CREATE SCHEMA raw\nCREATE SCHEMA dwh",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create db StackOverflowDwh')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflowDwh"
				},
				"content": {
					"query": "CREATE DATABASE StackOverflowDwh COLLATE Latin1_General_100_CI_AS_SC_UTF8",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CrossDB ServerlessQuery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT COUNT(*)\n FROM [default].[dbo].[postswithsentiments] S\n    INNER JOIN [AnalyticsDB].[dbo].[Posts] P \n        ON S.id COLLATE Latin1_General_100_BIN2_UTF8  = P.id COLLATE Latin1_General_100_BIN2_UTF8\n\n\n\n  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Synapse Link - Posts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*CREATE CREDENTIAL AppCosmosCredential\n    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'xxxxxx';*/\n\nALTER VIEW dbo.Posts AS\nSELECT LastEditorDisplayName\n,AcceptedAnswerId\n,id\n,[CreationDate] = CAST(CreationDate AS DATETIME)\n,AnswerCount\n,CommentCount\n,CommunityOwnedDate\n,FavoriteCount\n,[LastActivityDate] = CAST(LastActivityDate AS DATETIME)\n,LastEditDate\n,LastEditorUserId\n,OwnerUserId\n,ParentId\n,PostTypeId\n,Score\n,Tags\n,Title\n,ViewCount\n,[ExtractionDate] = CAST(LEFT(ExtractionDate,16)+':00' AS DATETIME)\n,[ClosedDate] = CAST(ClosedDate AS DATETIME)\nFROM OPENROWSET( \n       PROVIDER = 'CosmosDB',\n      CONNECTION = 'Account=appcosmos;Database=StackOverflow',\n      OBJECT = 'Posts',\n      SERVER_CREDENTIAL = 'AppCosmosCredential'\n        ) as documents",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Analytics",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Synapse Parquet - Comments')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW dbo.Comments AS\nSELECT\n    [year] =   r.filepath(1)\n    ,[month] = r.filepath(2)\n    ,[day] = r.filepath(3)\n    ,[h] = r.filepath(4)\n    ,[filename] = r.filepath(5)\n    ,r.*\n\nFROM\n    OPENROWSET(\n        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/comments/*/*/*/*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [r]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflowDwh/raw"
				},
				"content": {
					"query": "CREATE VIEW [raw].[Badges]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Badges.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[Comments]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Comments.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[PostHistory]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-PostHistory.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[PostLinks]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-PostLinks.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[Posts]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Posts.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[Tags]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Tags.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[Users]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Users.parquet',                FORMAT='PARQUET') AS [result]\nCREATE VIEW [raw].[Votes]AS SELECT *FROM    OPENROWSET(        BULK 'https://synapselakeapp.dfs.core.windows.net/lake/StackOverflow/raw/History/Parquet/stackoverflow.com-Votes.parquet',                FORMAT='PARQUET') AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Daily - Posts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflow"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 7,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "7",
						"spark.dynamicAllocation.maxExecutors": "7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"lakepath = \"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/\"\r\n",
							"rawpath = \"raw/Daily/posts/*/*.json\"\r\n",
							"goldpath = \"gold/\"\r\n",
							"tableName = \"Posts\""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\n",
							"df_json = spark.read.json(lakepath+rawpath)\n",
							"display(df_json.limit(3))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_flat = df_json.select(explode_outer(\"items\")) \\\n",
							"    .select(\"col.body\", \n",
							"        \"col.last_activity_date\",\n",
							"        \"col.up_vote_count\",\n",
							"        \"col.post_id\",\n",
							"        \"col.score\",\n",
							"        \"col.title\",\n",
							"        \"col.creation_date\"\n",
							"    )  #duplicates in dataset\n",
							"\n",
							"df_flat = df_flat.withColumn(\"_CreationDateTime\", df_flat[\"creation_date\"].cast(TimestampType())) \\\n",
							"    .withColumn(\"_LastActivityDate\", date_format(df_flat[\"last_activity_date\"].cast(TimestampType()),\"yyyy-MM-dd\")) \\\n",
							"    .withColumn(\"_PartitionDate\", date_format(df_flat[\"creation_date\"].cast(TimestampType()),\"yyyy-MM-dd\")) \\\n",
							"    .distinct()\n",
							"\n",
							"display(df_flat.limit(3))"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\n",
							"\n",
							"deltaTable = DeltaTable.forPath(spark, lakepath+goldpath+tableName)\n",
							"\n",
							"deltaTable.alias(tableName).merge(\n",
							"    df_flat.alias(\"updates\"),\n",
							"    tableName+\".Id = updates.post_id\") \\\n",
							"  .whenMatchedUpdate(set = \n",
							"    { \n",
							"      \"Body\" : \"updates.body\",\n",
							"      \"FavoriteCount\" : \"updates.up_vote_count\",\n",
							"      \"Score\" : \"updates.score\",\n",
							"      \"LastActivityDate\" : \"updates._LastActivityDate\"\n",
							"    } \n",
							"  ) \\\n",
							"  .whenNotMatchedInsert(values =\n",
							"    {\n",
							"      \"Body\" : \"updates.body\",\n",
							"      \"FavoriteCount\" : \"updates.up_vote_count\",\n",
							"      \"Score\" : \"updates.score\",\n",
							"      \"CreationDateTime\": \"updates._CreationDateTime\",\n",
							"      \"LastActivityDate\" : \"updates._LastActivityDate\",\n",
							"      \"PartitionDate\": \"updates._PartitionDate\"\n",
							"    }\n",
							"  ) \\\n",
							"  .execute()"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"deltaTable.delete(\"PartitionDate IS NULL\") "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"deltaTable.delete(\"CreationDateTime > '2021-09-05 06:23:00'\") "
						],
						"outputs": [],
						"execution_count": 38
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Daily - Tags')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflow"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 7,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "7",
						"spark.dynamicAllocation.maxExecutors": "7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"lakepath = \"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/\"\r\n",
							"rawpath = \"raw/Daily/tags/*/*.json\"\r\n",
							"goldpath = \"gold/\"\r\n",
							"tableName = \"Tags\""
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\n",
							"df_json = spark.read.json(lakepath+rawpath)\n",
							"display(df_json.limit(3))"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_flat = df_json.select(explode_outer(\"items\")).select(\"col.name\", \"col.count\").distinct() #duplicates in dataset\n",
							"display(df_flat.limit(3))"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"historypath = \"raw/History/Parquet/\"\n",
							"tableName = 'Tags'\n",
							"\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\n",
							"\n",
							"df.write.format(\"delta\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\n",
							"\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"SELECT * FROM sparkdwh.Tags WHERE TagName = \"javascript\""
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from delta.tables import *\n",
							"\n",
							"deltaTable = DeltaTable.forPath(spark, lakepath+goldpath+tableName)\n",
							"\n",
							"deltaTable.alias(\"tags\").merge(\n",
							"    df_flat.alias(\"updates\"),\n",
							"    \"tags.TagName = updates.name\") \\\n",
							"  .whenMatchedUpdate(set = { \"Count\" : \"updates.count\" } ) \\\n",
							"  .whenNotMatchedInsert(values =\n",
							"    {\n",
							"      \"TagName\": \"updates.name\",\n",
							"      \"Count\": \"updates.count\"\n",
							"    }\n",
							"  ) \\\n",
							"  .execute()"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"SELECT * FROM sparkdwh.Tags WHERE TagName = \"javascript\""
						],
						"outputs": [],
						"execution_count": 62
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Init from History')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "StackOverflow"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 7,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.types import *\r\n",
							"lakepath = \"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/\"\r\n",
							"goldpath = \"gold/\"\r\n",
							"historypath = \"raw/History/Parquet/\""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Tags**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'Tags'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df.write.format(\"delta\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Badges**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"DROP TABLE SparkDwh.Posts\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"tableName = 'Badges'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"Class\", df[\"Class\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"DateTime\", df[\"Date\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"Date\"],\"yyyy-MM-dd\"))\r\n",
							"                \r\n",
							"df_cleaned = df_withDate.drop(\"Date\")\r\n",
							"\r\n",
							"df_cleaned.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Comments**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'Comments'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"Score\", df[\"Score\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"                \r\n",
							"df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PostHistory**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'PostHistory'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostHistoryTypeId\", df[\"PostHistoryTypeId\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"UserId\", df[\"UserId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"\r\n",
							"df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**PostLinks**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'PostLinks'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"RelatedPostId\", df[\"RelatedPostId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"LinkTypeId\", df[\"LinkTypeId\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"\r\n",
							"df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Posts**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'Posts'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"AcceptedAnswerId\", df[\"AcceptedAnswerId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostTypeId\", df[\"PostTypeId\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"Score\", df[\"Score\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"ViewCount\", df[\"ViewCount\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"OwnerUserId\", df[\"OwnerUserId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"LastEditorUserId\", df[\"LastEditorUserId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"LastEditDate\", df[\"LastEditDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"LastActivityDate\", df[\"LastActivityDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"AnswerCount\", df[\"AnswerCount\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"CommentCount\", df[\"CommentCount\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"FavoriteCount\", df[\"FavoriteCount\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"CommunityOwnedDate\", df[\"CommunityOwnedDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"\r\n",
							"df_withDate = df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").option(\"mergeSchema\", \"true\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Users**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'Users'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"Reputation\", df[\"Reputation\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"LastAccessDate\", df[\"LastAccessDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"Views\", df[\"Views\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"UpVotes\", df[\"UpVotes\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"DownVotes\", df[\"DownVotes\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"\r\n",
							"df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**Votes**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tableName = 'Votes'\r\n",
							"\r\n",
							"df = spark.read.load(lakepath+historypath+'/stackoverflow.com-'+tableName+'.parquet', format='parquet')\r\n",
							"\r\n",
							"df_withDate = df.withColumn(\"Id\", df[\"Id\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"PostId\", df[\"PostId\"].cast(LongType()))\\\r\n",
							"                .withColumn(\"VoteTypeId\", df[\"VoteTypeId\"].cast(IntegerType()))\\\r\n",
							"                .withColumn(\"CreationDateTime\", df[\"CreationDate\"].cast(TimestampType()))\\\r\n",
							"                .withColumn(\"PartitionDate\", date_format(df[\"CreationDate\"],\"yyyy-MM-dd\"))\r\n",
							"\r\n",
							"df_withDate.drop(\"CreationDate\")\r\n",
							"\r\n",
							"df_withDate.write.format(\"delta\").partitionBy(\"PartitionDate\").mode(\"overwrite\").save(lakepath+goldpath+tableName)\r\n",
							"\r\n",
							"spark.sql(\"CREATE TABLE IF NOT EXISTS SparkDwh.{0} USING DELTA LOCATION '{1}'\".format(tableName,lakepath+goldpath+tableName))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NLP - Clean Post')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NLP"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import sparknlp\r\n",
							"\r\n",
							"df = spark.sql(\"SELECT * FROM `sparkdwh`.`posts`\")\r\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from sparknlp.base import *\r\n",
							"from sparknlp.annotator import *\r\n",
							"from pyspark.ml import Pipeline\r\n",
							"from sparknlp.pretrained import PretrainedPipeline\r\n",
							"\r\n",
							"\r\n",
							"documentAssembler = DocumentAssembler() \\\r\n",
							"    .setInputCol('Body') \\\r\n",
							"    .setOutputCol('BodyClean')\r\n",
							"\r\n",
							"cleanUpPatterns = [\"<[^>]*>\"]\r\n",
							"\r\n",
							"documentNormalizer = DocumentNormalizer() \\\r\n",
							"    .setInputCols(\"BodyClean\") \\\r\n",
							"    .setOutputCol(\"normalizedBody\") \\\r\n",
							"    .setAction(\"clean\") \\\r\n",
							"    .setPatterns(cleanUpPatterns) \\\r\n",
							"    .setReplacement(\" \") \\\r\n",
							"    .setPolicy(\"pretty_all\") \\\r\n",
							"    .setLowercase(True)\r\n",
							"\r\n",
							"useEmbeddings = UniversalSentenceEncoder.pretrained() \\\r\n",
							"    .setInputCols([\"normalizedBody\"]) \\\r\n",
							"    .setOutputCol(\"sentence_embeddings\")\r\n",
							"sentiment = SentimentDLModel.pretrained(\"sentimentdl_use_twitter\") \\\r\n",
							"    .setInputCols([\"sentence_embeddings\"]) \\\r\n",
							"    .setThreshold(0.7) \\\r\n",
							"    .setOutputCol(\"sentiment\")\r\n",
							"\r\n",
							"docPatternRemoverPipeline = \\\r\n",
							"  Pipeline() \\\r\n",
							"    .setStages([\r\n",
							"        documentAssembler,\r\n",
							"        documentNormalizer,\r\n",
							"        useEmbeddings,\r\n",
							"        sentiment\r\n",
							"    ])\r\n",
							"\r\n",
							"ds = docPatternRemoverPipeline.fit(df).transform(df)\r\n",
							"\r\n",
							"ds.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import tensorflow as tf\r\n",
							"print([tf.__version__, tf.test.is_gpu_available()])"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"df = spark.read.load('abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/parquet/stackoverflow.com-Tags.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import year, month, dayofmonth, hour, minute, second\r\n",
							"\r\n",
							"df = spark.read.format('xml').options(rowTag='row').load('abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/xml/stackoverflow.com-Posts.xml')\r\n",
							"\r\n",
							"\r\n",
							"df_final = df.withColumn(\"year\", year(df[\"_CreationDate\"])) \\\r\n",
							"                .withColumn(\"month\", month(df[\"_CreationDate\"])) \\\r\n",
							"                .withColumn(\"day\", dayofmonth(df[\"_CreationDate\"]))\r\n",
							"\r\n",
							"\r\n",
							"df_final.write.partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").parquet(\"abfss://lake@synapselakeapp.dfs.core.windows.net/Partitioned/Posts\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import com.databricks.spark.xml._\r\n",
							"\r\n",
							"val df = spark.read.option(\"rowTag\", \"row\").xml(\"abfss://lake@synapselakeapp.dfs.core.windows.net/StackOverflow/xml/stackoverflow.com-Posts.xml\")\r\n",
							"\r\n",
							"df.write.format(\"parquet\").mode(\"overwrite\").save(\"abfss://lake@synapselakeapp.dfs.core.windows.net/Partitioned/Posts-scala\")"
						],
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Partinioning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://lake@synapselakeapp.dfs.core.windows.net/Full/dbo.Posts.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import year, month, dayofmonth, hour, minute, second\r\n",
							"df_final = df.withColumn(\"year\", year(df[\"CreationDate\"])) \\\r\n",
							"                .withColumn(\"month\", month(df[\"CreationDate\"])) \\\r\n",
							"                .withColumn(\"day\", dayofmonth(df[\"CreationDate\"]))\r\n",
							"\r\n",
							"\r\n",
							"df_final.write.partitionBy(\"year\",\"month\",\"day\").mode(\"overwrite\").parquet(\"abfss://lake@synapselakeapp.dfs.core.windows.net/Partitioned/Posts\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sentiment Analysis')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 4,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from mmlspark.cognitive import *\r\n",
							"from notebookutils import mssparkutils\r\n",
							"from pyspark.sql.functions import explode\r\n",
							"\r\n",
							"# Fetch the subscription key (or a general Cognitive Service key) from Azure Key Vault\r\n",
							"service_key = mssparkutils.credentials.getSecret(\"akv-app\", \"cognitive-key\", \"akv_app\")\r\n",
							"\r\n",
							"# Load the data into a Spark DataFrame\r\n",
							"df = spark.sql(\"SELECT * FROM default.posts\")\r\n",
							"\r\n",
							"sentiment = (TextSentiment()\r\n",
							"    .setLocation(\"northeurope\")\r\n",
							"    .setSubscriptionKey(service_key)\r\n",
							"    .setOutputCol(\"output\")\r\n",
							"    .setErrorCol(\"error\")\r\n",
							"    .setLanguage(\"en\")\r\n",
							"    .setTextCol(\"Body\"))\r\n",
							"\r\n",
							"results = sentiment.transform(df)\r\n",
							"\r\n",
							"final = results\\\r\n",
							"    .select(\"Body\",\"id\", explode(\"output\").alias(\"exploded\"), \"error\")\\\r\n",
							"    .select(\"Body\",\"id\", \"exploded.*\", \"error\")\\\r\n",
							"    .limit(100)\r\n",
							"# Show the results\r\n",
							"display(final)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS PostsWithSentiments\"); \r\n",
							""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"final.write.saveAsTable(\"PostsWithSentiments\");"
						],
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Synapse Link - Post Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Archive"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c24ef419-76bf-4265-bb0d-e3e3f3086be2/resourceGroups/complete-big-data-architecture/providers/Microsoft.Synapse/workspaces/synapse-app/bigDataPools/spark",
						"name": "spark",
						"type": "Spark",
						"endpoint": "https://synapse-app.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"cosmos.olap\")\\\r\n",
							"    .option(\"spark.synapse.linkedService\", \"CosmosDb\")\\\r\n",
							"    .option(\"spark.cosmos.container\", \"Posts\")\\\r\n",
							"    .load()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.show()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.sql(\"DROP TABLE IF EXISTS Posts\"); \r\n",
							"df.write.saveAsTable(\"Posts\");"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT COUNT(*) FROM Posts"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqdw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15Min')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Master - Daily",
						"type": "PipelineReference"
					},
					"parameters": {
						"BaseUrl": "[parameters('15Min_properties_pipeline_parameters_BaseUrl')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2021-10-12T21:34:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"count": 3,
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Master - Daily')]"
			]
		}
	]
}